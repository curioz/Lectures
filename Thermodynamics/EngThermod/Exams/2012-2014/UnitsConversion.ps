%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: Tables_Steam.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: jgomes
%%CreationDate: 06/03/13, 18:33:19
%%BoundingBox: 25 36 570 806
%%HiResBoundingBox: 25.4395 36 569.5606 806
%%CropBox: 25.4395 36 569.5606 806
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (Color LaserJet 9500 MFP) (3010.000) 550
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A4
<</PageSize[595 842]/ImagingBBox null>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 822 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2013-03-06T14:19:51Z"
   xmp:CreatorTool="Adobe Acrobat 9.5.3"
   xmp:ModifyDate="2013-03-06T14:19:51Z"
   pdf:Producer="GPL Ghostscript 9.05">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>jgomes</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Engineering-Thermodynamics_Rajput_ronaldplus.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 16 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (16)]
[/TrimBox [25.439422607422 36 569.560546875 806]]
[/BleedBox [25.439422607422 36 569.560546875 806]]
[/ArtBox [48.7035 68.9216 546.297 773.078 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
25.4394 36 mo
25.4394 806 li
569.561 806 li
569.561 36 li
cp
clp
[.914489 0 0 .914489 25.4394 36 ]ct
gsave
25.4395 36 mo
25.4395 806 li
569.561 806 li
569.561 36 li
cp
clp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.699219 .675781 .640625 .738281 cmyk
true set_gvm
%%IncludeResource: font Times-Roman
/ZLTSUK+Times-Roman /Times-Roman findfont ct_VMDictPut
/ZLTSUK+Times-Roman*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B 
/.notdef /D /E /.notdef /G /.notdef /I 2{/.notdef}rp 
/L /M /N /O 2{/.notdef}rp /R /S /T 
171{/.notdef}rp]
ZLTSUK+Times-Roman nf
reset_gvm
ZLTSUK+Times-Roman*1 [7.31591 0 0 -7.31591 0 0 ]msf
99.9703 142.922 mo
(STEAM TABLES ANDMOLLIERDIAGRAM)
[4.09983 4.5021 4.5021 5.31406 6.53593 5.81614 3.9534 5.31406 4.91177 4.50212 4.50209 4.09987 
5.59435 5.15747 5.1575 10.9737 6.57764 5.35574 4.54381 4.54378 2.50996 4.54381 10.7725 5.45599 
2.6102 5.45599 5.45599 5.05371 5.45599 0 ]xsh
ZLTSUK+Times-Roman*1 [9.14489 0 0 -9.14489 0 0 ]msf
473.959 142.922 mo
(\()sh
true set_gvm
%%IncludeResource: font Times-Italic
/ZLTSUL+Times-Italic /Times-Italic findfont ct_VMDictPut
/ZLTSUL+Times-Italic*1 
[105{/.notdef}rp /i 14{/.notdef}rp /x 135{/.notdef}rp]
ZLTSUL+Times-Italic nf
reset_gvm
ZLTSUL+Times-Italic*1 [9.14489 0 0 -9.14489 0 0 ]msf
479.227 142.922 mo
(xix)
[3.99603 2.47821 0 ]xsh
ZLTSUK+Times-Roman*1 [9.14489 0 0 -9.14489 0 0 ]msf
489.762 142.922 mo
( \))
[2.2222 0 ]xsh
true set_gvm
%%IncludeResource: font Helvetica
/ZLTSUM+Helvetica /Helvetica findfont ct_VMDictPut
/ZLTSUM+Helvetica*1 
[45{/.notdef}rp /hyphen /period 6{/.notdef}rp /five 13{/.notdef}rp /C 9{/.notdef}rp 
/M 14{/.notdef}rp /backslash 4{/.notdef}rp /a 2{/.notdef}rp /d /e 
2{/.notdef}rp /h 4{/.notdef}rp /m 2{/.notdef}rp /p /.notdef /r 
/s /t 139{/.notdef}rp]
ZLTSUM+Helvetica nf
reset_gvm
ZLTSUM+Helvetica*1 [7.31591 0 0 -7.31591 0 0 ]msf
99.0917 744.071 mo
(dharm)
[4.04203 4.04204 4.04203 2.41048 0 ]xsh
99.0917 754.825 mo
(\\M-therm\\C-steam.pm5)
[1.96871 6.02894 2.37098 1.9687 4.00253 4.00252 2.37099 6.02893 1.9687 5.21675 2.37099 3.59282 
1.9687 4.00252 4.00253 6.02893 1.9687 4.00253 6.02893 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: PSJBAA+NewCenturySchlbk-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PSJBAA+NewCenturySchlbk-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 76 /L put
dup 80 /P put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
def
/FontBBox {-19 -213 974 744} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
28 dict dup begin
/space <1C60D8A8C9B84D35C0> |-
/comma <1C60D8A8C9B854D0CACB594FB9BD2C63F418A166C4DBBA3E681290F1
874721821B821AEAD830420D332E7C142E2678271B1B8A3C8D36337578F4BC83
A97F81359C6AE8350C7EF692A6ACA08C5E6F59CECCEE1935BE47A0B8DF2D7B14
82FA09ABB24ED129B7A2D15E62EB16> |-
/A <1C60D8A8C9B6EA91F570DB23602C090DE047C4591150890BF0E0199DF1E2
7A5098387AB79FD9C951E3F50CAE046CDB8244452A6566FC1FC70DD56596DA62
777152B9B3A484DD89AF3F38324B65C4B83EF6E75E2E0D434EC8A3959B619EF8
CA430381735EF63511D5952AAC62284E694C181FFDD02459AF062D3EC8B2010D
DF0AB9FE> |-
/B <1C60D8A8C9B6FF86F5EDA1FB066252EA05EC511C6CAE0ADD61DDA046C1F1
9F71662AC65915659A5BDB7A851CEE3EA0B29EFE8261B2708A87939F26F51C2A
8675021CA5D9DB2277B07949AAFAEF7F974BC53E9A647E16571574BED54574E5
7F1F3B16E4887BD31203CA32DE13849C4475AB1DA369F442E72C046F13FA99AF
DE5E94C6A417DB99F527D6A20FC71F3E47BB728B02D1F9D259D48101312D2FCB
DFEE26B40A5E4FCD7732750A6E581B79FD468A2A1BD63E40833E5D615AF41EBC
CD4EC13D62C4E64ABF7092FE8ECBF9FB3BE95AE1A93E7F6514B4A97DA7E85592
E1A7AB50B8DD> |-
/C <1C60D8A8C9B6FF86FBE8F7359288693FE1317BA3DF93545581411D2A18EB
14D4D634E0541F0B5587B89BE063C62DE19D0AD4388BFB5DF161CA5DF9331941
699B803C6F31D7F08526260332917B5F9B4EE5FA7F783CA763C8B8D0D59CE00C
19D968D7E1AB249B6F569B923ADF63981D9DB3C01EAD867FC0A5B3A5261FE6CF
ED87B21D6198A2BABD39> |-
/E <1C60D8A8C9B6EA91C16A8C5700E9120FC515A4D02D3E53E2936DD284EB23
95455CA807DB10EA434B9C1EDD96B130FE3834165FA72A37B714B414D1441764
B3B674B7A1BBBA6174FF781B9ECF47F95DA3B7BF7FC25AA98BA7B8647D584920
4DD7C89525AE3072E0D706B57497C4B2FCC817C6199A43938B03A6C1C3D35D18
1DC4CDCF0D60719F13A91EB27FDBC503734BA3A0829965BE5AA2C8CCC9CB4361
D7A3C78C899AC074F5943D4E6FDF2BDCE89BAF69077941D194B6FB33C87267E5
D964> |-
/F <1C60D8A8C9B6079F62A90B9DFE8E41471E0C8891BFFD28CCD6EC18B34B7A
7C09AE53F07EE21480F692258670BC986894B2BE3C4476392457E898401FBF88
8739842851976CBED0AC1BC8B142545725CE67A63CAF9C484B91FDE55B556761
889F86BE4F661583AA90A4ECDF80399F9AD6779A6B80E8137930322963C2CC82
7C19D7E9AE89D9A2783955905874DA38EF3C87FCF610B591BE62CE2DA190D3FB
7FD5F1E5DAB3D22750F99EF57C871C> |-
/H <1C60D8A8C9B69BE48AA18B7FC9114407D98E75E776CA8F3B5B604EED5719
B008FEF14841D76D6A0608C4FBD647CF9AC73E963C71A8134821DBB5E6F43796
B73FC85338D9FAF54A59017F83797822DC3A1CF8B176D851E4B9B00C77A2EC85
D62ADC5EDBDB7BEA6018FFC91441C43999F9D44557ED96CEB5B4C615AF2C7666
CE553504FDA6602CC2EE0B63C3FDC5E05409E59B5068013B8562DDDDFEFEE17E
752156A9BF7357CBEB2A217CEA7484A14E5F953BD056569BD1125309FD1A82E8
7C7D67C3B10E9A5D17A6D4BC7B98EF89> |-
/L <1C60D8A8C9B6079F626840E89C89C712E075AA7DD8691BA1C4A05077C920
9D038F0CFB79B59A1136EEE32F80DEB9AEBDDA1756C517785AB0F438417E7D01
8C802A450FB7256C195E52F9A44D66D7223221DEFFEE1E3D120537477B72308C
267D52C75CC4996AE90DA152CDBA70C137B06F8990F2453564B37FFEE5> |-
/P <1C60D8A8C9B6EA91C1AFF5ED46848F3BA19868E286BBF3A541E40DCC1775
E03309057D974322C13BCEEADA0174FDD1876CDEDB8EC20F2DE9262AFC07985B
5F4632083CFEB0EF44323DB7145CFC22FB59A54064A331573223595DA335DAF6
6640D710C90A3CBFD661B7FCD2361893563B292D5FCEBCBAABC94A142323CEF9
4341B9CB200C6A8802E5579BCCC277E9CA6F6C279939118A6EDEFC8E2E67B949
A4BDCE375A2E66C3D6BB> |-
/T <1C60D8A8C9B6079F623C17639D11A5A60415D778C565AF7A3AC8BE5F40FB
7FE3D29164F2E85BD4783CF7E0257F910F95D3A47CE3007043CD87C56A80885C
909D71791828A15892119CF730159B6116D003FBA98E6CCE0396CEF425DF60A4
933204C2CD8D6BB8AD5BCB14222017E9EBFEE3FF7744D900272D31B29C87CF50
B7A1D4283792E8DC9AABBC0D3BE31D70CE62> |-
/V <1C60D8A8C9B6EA91C1779770B43E75D4BF1D8C70BE55550EB95F115A4699
CE2EC06CB8CC3738A6217752D27D5EDDDB065BB59096BF8DC6AB3FCB2EA14919
890D3DC98C24A8C3AE61EFA1A944A8C8E0565E1653B77FD8042233529558CA28
DACD20CFA1DA460F984CD2A650C2103D65EE90> |-
/W <1C60D8A8C9B5FBBABD68746E62462FD6E7A8F4D31305A4C98AE4D2C4C2B5
444226A88ECF5668496E03A2EC84BDCC90EF5F84223E2A70C1BE5ABEE2A81105
7EAB4151B6BC96ACE79C81BE818E9A832974F301F48658FE50FD4A253D2B08D5
8CE3DA56A417F0EA3F48170D0097902F90CB132D8F5C6C2BD097833A2B356AD2
D6A692B38EA60FE08D7883BAEE3014A80A26C377AE02CD5767233DA5A83A1ADE
EC663599E0F2ECD1AAEEC57C3FF534BA6AA42E47D5D7333FBB> |-
/a <1C60D8A8C9B7D8BE199E0342C518B90E8ED97AAA88A31019FF24F35FBF1D
45662A49CE026A09F96D15C3306A5CBD4734397A4B71804587F11EF8BC24E1C0
6998EFDA0B463BBEC1A34F97936C531B27147A3F3A717D46B96E3404ACAE70F6
DDC90E8E92A4FF16BADCBA9F88B5FA0B39DBB7992AB712E63C274D38B8634DFC
3DA9F6283B074643373D1D4642F6B8E47B2EFB4AD36A949DD2CAFE7A330F68A9
DE29DBA046305B0CAD44121EB0A7D7E64294E4FB66CE9E2A4B557DA68BE3F34C
6D88C63BDDDFA11D804B686ABC243B0484F2F36D887426B923496F8CE4868C5E
ABBEFA83748DDFE94E15E5CEADF3E945AE607C621F2D51F499FCBB6A81E589D4
762A56384F6ED43D9F5103167E7A82935E6ABEB55F3B565E9002CB9425E4B53E
02A70192594C8069CDB0> |-
/c <1C60D8A8C9B7EF3224010D940B9649D3A0F1AAD9CBD755F6A2515F0AF563
8C49D1A1DFA55AE9B9510F2E3BD591D9772BAD76ECD0B166F3181D2A59667AFA
280092EDE0D418AB4FC991941C46BEC98B6054F8B2ACCBBAA8490E2DCC286355
BCC1D9548A73F9A125141D12E65182D82DA2944247799F8D0862F63CCDBAB5A7
F6413B8644238B692874CEEF163E062CE90B211D1B109F9B6827FE66D9> |-
/e <1C60D8A8C9B7FD84950453911B9166225B6139BE4234ED648BA2C2D11611
01BCA09A150ED167FC803F790F170440E8C635505B5D3A7DDEA9A7DD638FC29A
F55E18A791200C65D568EA7F5CDC48F5E98B6D803F0CFC2BAB342B730DAE953A
B4B99720FD432AD83FCD602FE61B0D26FB9E5EC4888414C363AD2CE99B69865A
194C4C20334B6397A932E250569CB9B5C3674AD3AA3310F834324BE9> |-
/g <1C60D8A8C9B7D8BE167DBA5B9A177F441E26B61602E51CF162EEC781582E
4672DADB6A3D51328609ED11F7AAD5982FC119E102C186086EA4AE8AFA0A8ACF
47CDDA0D79838F71105613F1353B307CC13E0D34972FFA3479A4E6860E7A8F34
E4DD40142488A3794D7520A3A18AA35252AE7EDE46A8D674611A8377825CCD95
6002F9231DE9E5A0E3266E71BCC6EB8DC3AE00BC10DDB85BEAC9B768D24FBAAC
5835C827E3119028280F9AFD8CAF29C073A3AE2C711EA231A05021353B70F169
450698F42A25DEB21FAA47633A08A36BDA0CB63E8EF0AEC08E7EAAF30BDBB735
B09B0580B4A76EBD46AACCC9A88EF870220154648397CAF3CA98CC7118F1304B
6BD07CFBD612BF30F3747AA7D351DC14E48531E9515E19A46FF6EE996B53D3BD
BC48B6DC27D3C1E90A132EE550EC7FA01112FF44B20EF21E0BB8981DD337B85E
C3952ECEDF4B3D921C76DC5026CFFF81CE4D844D220B8F66748C4A2F52959D73
0505C7B2E200706E7931B7E592454778945E1622542F370693F8D89CBD149D97
9ADD4B6C3BC34F093A6B31932EEE38> |-
/i <1C60D8A8C9B7299AA214BBB07A6B4E0104645F421821DF13E4A8D09D955C
2786C50DB9027A1A76DB3EB2FD09D961844B717401F80EAAD7A559D8D309A1EE
65A9913438E4B78F1AFACDD2DAED8B2422B4676957658724B0858ED49FB3F0F9
75478A002C6346EC94C8C32C44789024E93BBE6D55F191899630641F66B9ABA6
E36633869C7F242263740FA3A9260F8DE39EAD50AD2C> |-
/k <1C60D8A8C9B64EDFE578B92007197DDE5A9CFA1B4C61C236C87B14D732FE
B100D5954B56F08FED57A1F6F8405DA2F1481DC6CC5593F7D728CF892E1A2573
9A6E915C93B6EB2C97239A394A5C49FE42A10B6ED1302567A3C8437DD044C1BA
6B422954C3C251017B8187308AC43380FFA34B83B812E535496362372BC00BB0
B6FAAF2951E7F6B6D5290CF75EE1C2F3CE84BDAC505B33CE3A78043DE3C381BF
5E21C30605E9A216D3935204E82FDE0A135BC9D517D328E54B25F73C659E> |-
/n <1C60D8A8C9B620B7E28D6F9D95A97E2875708E92D346AEF1DBDAC11B8086
DDB94B0883DA9DCC21E5585DA362D4BC6EB77E70D61128E2FBC0FB3A29BD25CB
F2C4DBA5147458DE64CA77A88CA9667EBD62C6186A3333B82E23E0534775072D
CDADFF014FE604F14DD7FD04A47BFF1D877234321391E1D09FB69BA3F21D0ED7
D072114AA2EE8D6AA8E2AF961C9ACEAD1892EBD21D41EAAE65A290CFCF915F8D
6B164AE2ECB73B63317493E893059E776973EE947C821E60E5BBF5ADB133FD04
451EA3> |-
/o <1C60D8A8C9B7D8BE16E18D444C45AFDC844F711DA5F45486D32479156D6F
B010D1D293299338EA8D053635EB307CD92B3CC42CAAC4CD997AD81F491B9FE3
CC8AD8F03B52CD0D75061287FB39643AD7FA6EC31D99A0F49A299196B0C2A800
FD8AA81E5A805F0063FB2ED825205BC7F0A43A3894D3CB79F4C66896CFBB1759
A76837> |-
/r <1C60D8A8C9B7B4A12EB2D0A70F79FD69375AF8FBFEB6F6EC45CAE6CE3603
EB1093F1B67AC1DB5C7C3D05E7BA158A9CA1CDFF40688FB39E24ECDDAFEE086E
F2F2838E88BA74934BA536F7B6D750C968E67B4CD9EB83DBA2296542A656C8A2
9BDB45CB505960A3C2A4847FB10D1B53AB1D59EDFE0F73C39F9F26DBDBA48462
AAE95CE453DF1F6A753D1234D72FCB203C2B3F293D0D2CA94EF3C79D9EEC3370
C059E237BA1C10DFB8E464DC25> |-
/s <1C60D8A8C9B7A73DB6E17F4FA5D6618C485B5126C23BC3577E9D205472FA
7ED57DFABDFE7A266F646618F533EB72296AAB923025BC44D51FEA2AC26AA006
64DA4C79FA9EEF710D62422724AD19023265F11AE18D9A7DC0BDD2ED9FBD32A8
14133F1F6D9BF5600CC927D7BF6DE351A293AE822AEAC372CC5CF8D60D721AC2
F04B66FA8E2AEB80CB9D733585B3EC9668ED3925DA56087055F999A76469C19F
A45B5B61D5D6336C353E39B78B883B2F996421BB7636B0AFA4E8884094EEBE> |-
/t <1C60D8A8C9B71131D0F23A0900C0A4D841C518DCA01E402EB6775CD7B5E7
4DDBACBEF0594216C136E31EFA694506E06D6A9E6589205BE94B1AB19533B282
758522B893334ED2EAF750D901318690F81EC5F75C1FA0DDC984B251AED70A35
7DBB6F821E67E60DD269F8B60519C1> |-
/u <1C60D8A8C9B620B7F36F732D6856B81DF7D531089B19B2877847A4DD7037
5DBFFC94E226B258E4BF9FC7B1FE13A7A11FD240BEE051901034D52516455DD9
69C6023095F3BFA4B5786094F347E7A3F162D5BDE081A48594937B4B86E6FB74
5CB589C1411B8976C3059092CD711F6131C714496A74628E7DC8979DC6FCEEC2
FFDD973C631ABAAB8F9ABED687F1525EAA7D96B1260C9F0A41C87A4102AE1680
04DA> |-
/v <1C60D8A8C9B7D8BE1684735799016CDE3DAD0F3A2E3F95B8C7C8AE36EF24
8332A2FF753460850AE06E180BF69A6F2EB54511C9BBEB995F34A62C61B30E4F
58009725486BB6AE662003D3B14DCF42AB1358DC12EA1645DEB6D710C5F3A060
D8B25AAA207DE7D28DAF6B8F5024> |-
/y <1C60D8A8C9B7D8BE193AEEA2D29BFEEA704144D42F0EF59813076B89168A
E3882742B0D2A530D1F5131ED72EC125D494A8E0DB905D0F32C3588E1078EC99
B9FB33409A196BA085C2418FED3AB3B242583D42E42E13B8A8438BA57EE7686D
E699918B5659BD647E6A405FCBC809D10148BD7B6DC086681BED252E0C2ADFA8
49C6600BE7280B620D75093B308B47A08F7773AC9416F7EBEBEDFF9630BC09D4
8D286092AE942808511575E4D7F4AF156EBE58BF6C02DA02AF8ED7BA2B082642
9A6D3D49E1B795367CDB154B6F78AC332FCD> |-
/.notdef <1C60D8A8C9B825FA0C55D94CF30B04E91930F79B2A7531B6DFEACE
089BFA0CCAAA1D14> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/ZLTSUN+NewCenturySchlbk-Bold /PSJBAA+NewCenturySchlbk-Bold findfont ct_VMDictPut
/ZLTSUN+NewCenturySchlbk-Bold*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 20{/.notdef}rp /A /B /C 
/.notdef /E /F /.notdef /H 3{/.notdef}rp /L 3{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V /W 9{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /.notdef /i 
/.notdef /k 2{/.notdef}rp /n /o 2{/.notdef}rp /r /s 
/t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
ZLTSUN+NewCenturySchlbk-Bold nf
ZLTSUN+NewCenturySchlbk-Bold*1 [8.68764 0 0 -8.68764 0 0 ]msf
276.649 165.089 mo
(TABLE V)
[6.17776 6.49927 6.66431 6.1778 6.49924 3.31265 0 ]xsh
251.628 180.892 mo
(Conversion Factors)
[6.89539 5.4444 6.0874 5.4444 5.1232 4.64523 4.48019 3.35077 5.44437 6.08743 3.86429 6.40887 
5.44443 4.96671 3.83728 5.4444 4.64523 0 ]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.839 192.524 mo
(Force)
[5.46843 4.60547 3.89043 4.17807 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: LXAAAA+NewCenturySchlbk-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LXAAAA+NewCenturySchlbk-Roman def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 33 /endash put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 72 /H put
dup 78 /N put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 215 /multiply put
def
/FontBBox {-85 -214 974 744} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
40 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/endash <1C60D8A8C9B7EF322B718661C3415F5B64AF4209AE> |-
/hyphen <1C60D8A8C9B81F2C784D51010FED4365A9A3A28E3806> |-
/period <1C60D8A8C9B854D0E9B3B0A3D5D3375BD81AE208E100A6700738E38
50239733F09F868BA19D267F82A73F1A059C00C6DBA8323DE869EFF095143215
E3BE0B261A6E40AC2C9> |-
/slash <1C60D8A8C9B854D0F44DF128E3286C7519F57E990D7DCCD6EB9D18> |-
/zero <1C60D8A8C9B7EF322BBF1B4BEA476094F5605A838AF16C13D94FF29BB
DF9E30AFBA2F6597672ACF53F2F90737B98897CC302A8BFE45987B3F7FBF49E7
4857F152A80C82595ECBF7BBFCC1408B435C453A4B254874553BF74BCC005E7B
6042BF67816E07E717EECE45DFE791D1B4412518CE573B92F206217EF97F4D22
8A5CC5308AC363A405822> |-
/one <1C60D8A8C9B7EF322B954E3D3E6B696CFD9C08FD3CFF00CE70CE06CAA9
4834C419163E2B723F7DF5C1FB2B34D22EF97E00444020C6C8579410269D24D1
D8A9453D5DDD2A7D4AE0444155A55619844488E80B26DB9B63FDB75D0BCFEE4E
B630A8> |-
/two <1C60D8A8C9B7EF322438AA883B8A3EE50D4239AC37EF6D850D4F8134A3
04F6029344EE368ACAA591984559FEDF345A8EB83221433A74D40C428106C9CF
04F22C20ABB6D5F5305D72C96307810F7BEEA5EF32C3F687A8FDEE18E21EB45F
CB315A2E6DF2B3C292BE7C653B32B07A9FE503C85747FD775ADE3C19654B8254
7CB6B647166607A248CA257F63AB4E201289A9A4DF82E63CA14F56A675478C2D
73524E3477595E6436AE57D0ED12FDDA50C3CB2A6B416DE75F61F585880C5B5D
5A0059D36319CF2818666DE104FD31052255C40A27> |-
/three <1C60D8A8C9B7EF322BE5F47D67DC79A1A253EAEE37A8C5DD75842B45
EE0D92C2C96EE47BF47E9CDDBBA5B0F90A405BC8AA567EEB5A27454DD3F6C9E2
47E2EBD8FC2494449C683AD2AD49695FA5392D7A42E5C3A75A4FD021862EE3B9
E8E9EE055E1F396625D4D360B28C314A7E33E3641AA3334F1E0960EEB9F4C3E5
BF1FBB02BBA4E056514AC0A39C49C22B0B1D1FB7B34D876CBA8476B4F1FAD938
D03C7FD52A843F6E0B55B298F2FB8633E000287C5085F216142D468D2439D492
43CDEB8300D8AED0CB5FF15F104F8238ED1D20763A8F72C9787849CC41706D14
1A16691B2BAA0E425E5FF813E70B3B38F7015599C4CAC37562EE792A473F9762
B45F7AD53840F116AB9B68A7E42A5775B0789D6122A697D642B6F2A1D5D8C7F5
C3582B09D4F7CF87CA604C0575ED96F3D5D0E0A5B66AC8DDC55E4C> |-
/four <1C60D8A8C9B7EF322BDFC210EC734617A4FCE32E7125D20182D755A20
1920FB0EEE69311B8CC104D2E9DB16258256DF5240E0B064309A87B9DDEAE0D9
EC7A5957A6B9889D2C505F34976730BCBCC701648A9E1D8ADFAC1693165FD179
48387E48332D18DAE24A85FE523AE43F19A5CF678> |-
/five <1C60D8A8C9B7EF32243C755BF54818BA275A6285C1E31049D586E276C
CF03322A81F9CE0337C06037EC42076435DA59AAE342AB2D5C01DCE5A79B72CC
11B334BD004B92BBC7367D9F0395AB6A339D5659CA72588473C7A262E05E1226
02E85D795CAD6D190E35C7D56DBDF90FB8B4D3FAD9C15ADAB160ABC9CAF43F2A
6663234C1E70D818AB6C7E3AAA1222388DE616ACC6362C33B7944D7262D9514E
8769670FB4721FEF46C3041FEF9C9FBEFC835C37C5551E109A425D920230C299
4E5DDD8E0EE5F7813A0BCF8A6787EE8717D46FED09B309BA8691B17C012BD5B1
8C795146B9668EFEE5F0923B7A7B86CEA927823EFE15AABB4A97C5D4FF280987
758EB30378BC5B9AAF410448F642F54882DBC11590AF6C3D8C67C> |-
/six <1C60D8A8C9B7EF322B05945A267830AB01BD59C9694920A83ED5553735
D6AA391DC70D9B1CA6B5CF6EB57E1966635632C5EFC2B7D078D308B35A3966BF
AF433C5C8753C4DA78A983C09B84EA7A19013D711F6BDC1D86CCE7314A2A29F5
B0C94FC29D1853BF910BF044F6BAFAFE922E6E8E688D80F808FC82D3BC20D944
DAABACEBA31D63645364D101530E8CD96FB62F8711A6A8BBAF257415E8D6A786
EBE8F25B84D8C2E3AFB27E9AAC2229F73D16668426A7BB12DB8C301262989E3E
E35CF11314FBC8675D0463F0562DAF25E4A2DB9092DDC181BE08F5D1B022178B
23E3BEA01AFA3BB93E19AB3B> |-
/seven <1C60D8A8C9B7EF322B7DB197C374DDC8DF88F398178F0A90B1C5C7E8
232E5FAB0FF56757DDAD8C9E1033F8556AC16A7FA76DB0D500BA7A1218DDEA6C
A3EEB7E4509672661A547C6C71D94144818EC76D12243A840FC9CA208B7A4007
861BEECF555F9B64AC8202F24F6A8CA2D67F328E2E86F2E0E3B9C79AAB11624D
F41D234DC9847E> |-
/eight <1C60D8A8C9B7EF322B0466172423AA707A2886BDF6870BE77FBAF3C7
E618B46272BEE218884A76823D037CA7B96BA0DFC22A26D2292FE53C3C035B01
37DB7E84A54A76CE277150F741D26BD9B662ECBA8AE7C5E9CBC69A6937B6956D
5758EDE34A157DAF462595B483D7F1F7128D75D4F5EA59936A9AA27093824DC1
2716714990E076C15B86787663305ED8419BBB35EC139E2FA4C2988827D6D71F
401B0DE2D3C3C14CC76C82BC98884DE204575937E4D004F6F6CA9662C929812C
C5317830533A7219FA8CD6A0A5A7642ED1830AB871ADFB73AAF7CDFC6F0101B9
E034478BAFCDB97272E1602F8B2A6AA5889BD14B9EFE84124BC767F068B5A91D
3457EDFF> |-
/nine <1C60D8A8C9B7EF322434F5B3E6509EAB652E8420D47C831FAADB14A5F
F471B5DE216E0D8388932541CDEBCDCFB610626BFF787E9AF4498589D7527F25
469DF06F0AB3E73902194A03FB4146590A2E49D1A4FDCC15613A1E772FB1F18F
503EF6C6A03EBE670FF418023BCECBCFEF622A75385E9104698F43536E368236
47A5690BB3B46170D0845BD840EFA472F6C209325E2F0FCFF3CB6301CA0EACD4
F7EE2502C3EBFE1CDF4C57745134B5D57460868A3A24BECF864E47277C6E6E90
36156CC749AE1E877ACFA76294FAB802D52AA7B29AB2262CEE0BA853EA9E456D
6AE9BA27D4908280B4DC5E4> |-
/equal <1C60D8A8C9B7DDB6CCB6ABB95803B0228D7318482E6B93BD0AF5B682
DDEC1B94CCE1> |-
/H <1C60D8A8C9B6B41CBB65ACA8029ADC9FB20BB4B997F6F69A1414E065B141
DD1FE169D251C0E4BDFEB47D5B2CC2F09FF99E3AF53AF61FC439129D4FACEB79
3167FBD1C3B7EC2845745379199B9C6D3CA65F152ED1F9E7ABCD1A9A5CAE7946
4C586FAE4108E9303565E5FA08D90D4C2404F539B201BC96A8597B1819C3C43B
79A7DB13B39B11E19C4E8DB4DD20BD79D7BBAEC8955D986D70A1C10FAE4A2D2F
110B1CA888C5A55814CE65AA2562229DC955BD959FB8F773F7AF371818A6929E
77A5A5124BF472E9B5D2990A72C09EBA> |-
/N <1C60D8A8C9B6A283887EB3856A6E06FBDD9974D40AFF9D88C29D44D9401D
DDDCE1EE97FFAAEFC1C7B1999634D655E0381314FAFBC9462A40B2BE8BAC5D8A
21732F8E2D8BB8F5CB9173710485987B16D7C8CC7D69E8CDC6F98D77C2F6E197
FBF9C10B791078B1D49B69BA65C8146696E28A8736D41D5DCD258F2997BCDEDA
3186A06401D6DA904D4C> |-
/W <1C60D8A8C9B5FBBABD6877F37F9759EAC69346812BBF3D6C85E7EA5FC2F9
A430EBFCE1E6C81D0CCCD7B53832C7C25B894D21C5E0D7EBC40355D0F835F6A8
62D5E3162500B42CD92CF39A0FB8B0118C55F835C51D0EABE2D15A12EE2D2733
29F13DFA05B5FD941AD1DEDD555813F208C9F1C3D7D03E6675AA15E48EF1661A
A63D1F0F843193B924C103E1114EFF07A2AE37D013977712C8CD1DBFFD7B54DF
CE74F0CDCD116DE455D3D30961B5AAFE515E0D22C3B6C7AD60D7B7742B> |-
/a <1C60D8A8C9B7EF322BFE80DB95F53E2AE412851AB3D8FFEFDD94E084304D
B8A24C2B6C353ABF58AA38A8FD47B550608C6949627A4DD653F97F56E7E20EC4
400301ED1D2CAF4322C8CADF225F62B5504BA5298E65665D4D6FF5378A445E3F
39725C90BA5F46A5EAA613D8D3342ED589EEDB87BF3CE275C64785179AED5519
072FFE145874336B45BED5DB97AA78A13F2A294F152F5191F877F7EFB2BF6E6C
FEC466651AE58B95D21480130C961C02000FD12CEBE08285A9539D17B2DAED51
9F5ADFB516C3FFE00FF4DC1C160C578788FED711A4616814F680D8DC217BE53C
F075254161F1934F8B64E28C772B21B3D111AFE2A66526818D903CDDAC326006
4D5BA389037A031A15E63B9CEB7C7269746143C2707165978A4DFC2CABFA3015
F7AEB071DC11F597D2> |-
/b <1C60D8A8C9B7EF323E9F2ABF23BA4244B067E93B13E1E379A0F6FBB1F0DC
DC4EEA243AED87C9A70FBBFD698ECC678CF0379603D44281691D9659F58D6676
4221ADA6EC576B07F6D4CA7B278785B2D8122EEB1236A1DD17D20AD2D839A649
C7FB341088B7A3D7B54B784E1223E4687025698B6CC2E9B7E95CC4AFCE3F0B3D
082193F5C6521B230AD00E498285CBEF73843908B7440D359843B324A805FA15
75B7246473C78EE8D0A688C5> |-
/c <1C60D8A8C9B77FE2C1B896839EF95AB22ADCC176CA8F9819DB8654312BBE
38D089D0ECED214B05DA6CF2EFC6607D55F1438D4F28DF3BCDD6B851D523B339
C9E06D91B4268ED4DCB03888345D925F03C4943FCBA69DF7BFCFF320320CCFC5
95171A4A6A50F79AE876526174251D3AA84B5B61159371919044963DACA56CDB
C397DCA9D1AEB3B6B9517605AF0741F11C7EBFDFC03359B77BDE85747C> |-
/e <1C60D8A8C9B7A73DB6AEF6DAD88D39B63EACFC9C93386EE08CFF8648B3CA
9BC218BFA29C5BDDA88C4AD440E3C9C68AAB6C73529991632A3F408FFE2FB994
D3F979BEEB311462F900677C610021DEDCD5842935584128A978C767616D3F45
3E5644EB8F79E557CFA80D4BA6EB3838B0220E73180A643C8F723403167F6AE0
7F030DE49524BC0179E4A915D9A66022BB65049E200A4EA78E0A8D34EB08> |-
/f <1C60D8A8C9B81F2C3A751E566082ACFE1838A0D3A04243A4B44D6A7E78CE
0DBA8007281688D0D43584EB4B6FA7ADB9803A9BB8CB9B3F523D7EAFDB642AC2
CD4E000D12F094C6C1304F0334DF65F9D40E1B4012CC3F9BEE0A137178CC5720
7CB827152E5C2ABD99E23359336691ED31F4D5695C35CC12A3CCC97EDC992F80
8202D41B741DD81D602CB0658AF13D2F810653ED4D19DA7CA923CB15B1A00E93
A2BA9714> |-
/g <1C60D8A8C9B78256D288CFA930906C2922923B55C717B26008E28B4AE8D6
442FA2730558522B58210C6917A60FE07D601711090EB8F550DFD8569F805804
8691258A87C23D209DD9EB819FE66F6BC2528B0C2FE1E3D85CCB1F50CAA146EE
C3B5BFFD7EAEC16999CF17D24B91AE60058D6B6C04098DDA72B45EA177C940F8
F1B788DA2337ADB37A118CF82F9043D42D3D59BFA0D9F992F3B08A6EF6B9AC2D
034E5735C7846C89D7E2A8FB00143F8EF2F9C8FB62C4C0DE2EF8406F4DC465CE
D3898A181564D7F6997BB3E1CC5490472C7AD751A8F3B98CED6A45DBC6C6035D
BBF8DAA6920AC3B5972BB10C0A64228269ABA23C80CAE3B19298F89E8255845E
D22CFDB8257950D785706F9A46CE9BE6D759F115D73DF16827E1CD6549611960
470186D65ABD424D8F60A9D13F6805EC82F46A24167A5BEB60B5C48F984FC629
DF0F65DC60D4BF00C611FC059300F6AE8277C662280C14C727B0568238B43A27
16973F18FF16C28952BA95B69A7D9592BE6648D5DBB27E4FD9AC025032D9DC69
CC525909> |-
/h <1C60D8A8C9B7D8BE05D370F65A28F0E457002AD3E5FB5B528C72CF2441F5
6BAB67C8E20C4259B8366AD7E8ACD94A814C2B66102D7676222F885BB6DC05D2
561762BF4B6A8AB677DDC521F763D4B6D348458079910868100DBBB9F99EED0D
33744BF8F373FF0E31AEA6371ED2BB85EF8A733607624DC4C6A4EAB55133EE04
F97094F0E02793F1A29F60D6E66D11EABCD6DA9FA8444F36972DD217F1366D77
E06D5EB59760F74F7F6C6FE05F2C09990C501962E66879CC76811B11E952414F
7D49> |-
/j <1C60D8A8C9B84257616F9D365122D43007A667C55047C0F26592DF2276E6
0ADC3EB9890CDD1F897433C2C42EAF4439195FE56B15EEBA669B80BDAB3B3771
44EF5F2840DC45A5B285C206549A81690BB5BA0362984751D47BBB0E5867B46E
21488D898927E9D418BD6BCC10389D634B71BA778318C178A0F2BA01CF93FC92
284865FB6CB23B10D8434DF8F55604C78E54243E58E9D72D40AA3191DD4D5F36
08B79403CEC56040D7CC21E5260A67A6FCCF400C12D5DCFDA150D1> |-
/k <1C60D8A8C9B7CA643A2D22E11B8970A8261741E6DB4D962557A39CE6C80B
EC2A48610DB79FE485A522B2D97BAC1DD470CFB6816A68AA9C88C77E35A5D7C9
8C4D7FB01D98FFF13CD5F0A835E6C18EBEDC0A13CA69A34635A17254ABC87D33
DD03A5A4E44EF64D4399A4A18C30E7361CC6FCC434150A99889A94B9B5E397D4
6192A3219123A58D246AE3B37E82904F13861299424974BED4626F4D5A460BA8
5F99B56247D49984592772D0331FAD2899310C6C08D300226E3DF32A94D51E21> |-
/l <1C60D8A8C9B831A99B20642D1566FB42C98B21F3A129310BDE118A0440BD
63794CEC34FF67AFFE17248E3BA877CDCB861798EB0AA5BC1193CAC108635C98
5506C08A0456713653D02B50C81D8FB6E2ACADC78D8FD5> |-
/m <1C60D8A8C9B59F85FD3978C709B23A74107BBB8DB68CA35784F9133ABAFA
72CFD0879DA97990F27DCA80C1B1464C28017D3EE4F63C6F58DB06C10FABD340
289E185324B9F44ED76CCD38EF424F68BABCAD4C51DC1130C58770C614EA476F
C3AFD785AC81610EB574F187907232B9913CD2B8CD1B8AA369E179685A65FF5F
31BB7084AC78C6866ED0EEC4A21422F011207F189FDBAC1F412874F7B1A2362A
C52FA48DF223D4309EEF451C72D57E00475AC86E466A1040D6B8161D92602A93
5847383255F18BFA84FA8772E89BEC5AE8628AB957C554289B483479BCAAA69A
D12BC8A523042677440CF4AC085889D4C20957D91A0C804B5AA03C2D125B8399
ADA80B1D6F82D0D92CF86645E2177ACE1D0F793D3F79C7AAEC55E43E58A2493A
A14B6FB8AE9D4FE577> |-
/n <1C60D8A8C9B7D8BE0680077402D8411162AFB471D7B8EEDE10C95EEACC74
44F284B8D99047758B0C1F2508994F63C1C422ABF8DD1CB12ECA1C0EDFF632D9
811E0DBB6EEAFAEA043C1BBF93122A0E70494BCA5C04D19FEC3AF1E5381A079B
64B278D8E1C43801869834D73563995B513F114E1DFA405114CBD31A55472428
462CAB647C3D2AF00ED727DEC26A6E40E1A05869BC310CE36AA7949FCF0352D2
E6F68B2DB3B4B11E6D9C813BBB90A3C29A9078BB6C247E6D646A9C72392099D5
AD> |-
/o <1C60D8A8C9B7A73DB9ABB0514D31B2452E2571555D34CEF1E0DD0171A61A
85B024921AC551E99D83318CEE6ACCECAB6CE3A75494F90D5843518D2FF9B381
1CBA03AFDEC99B784B8848386E842B6D19B11149EE2B39C1D9EDB67A6E122F0E
78ABE6AA21166C2E82E0CB15D23366DED6FEF1FD4529F2F36C182B63A901BD79
B98A0E> |-
/p <1C60D8A8C9B7FD849E63F676BE4B1C03334FFC65720B8D3B4B0A1D676E9B
7578AD13547BB2F680A3985B0352200632AB57FE98E72CA667B0E9B114C048DC
51AFBA5544A9306FD718D25B804947D132AF2ED182CCE1763C7BADEF12655995
91C472050957BAE57C2326D06AEA95A5F796317C72E15471C52358C31335118B
E62B1E0E3EA38EAE2C2B0D06A07A93C1A9B0ACC8F969D045ABF323A623DB315F
0B3581DB6DF9FD9C0928C148DBC3412D4B0D826EC331CF12278C7FC0FB747C08
D32FFCCFC6> |-
/r <1C60D8A8C9B77FE2D62C3DEFA8FEEEC3C821639FE609DCE314F3DD99076D
28B9183A3DC646BC6E3996A2E81B06F28E9B8BE51BC007F5D8CA92F57B58FE21
920D0F36C6AC93FA0976A3566980BC74FF61250EB1E4C31333D32CA1E97F5885
2A09E2105BD56DCC43B2F7381FB6097D0F26DF2171D3EE6580CFDDC70D3C9869
FBCAA5C222BF4AED39C382ED42B8090720AF91FDC7D99A5EE536BACD1E3DD5ED
240E10571E612FF65CFFE597A561C1EC> |-
/s <1C60D8A8C9B74CDD96C2F57BE9CE439728D1A6E0952C9418D6B1E6CD0865
E0826A1173D7EAB52E2A90C5FA06DECB8836589086101170F44CD33F584F162E
C65E6B8225BD76C94684D1D18AF272E8305DD5542485861B09022295EBCA0420
4EA41F70147F326B7860855943C79998BAA5E8249FC6DDFD470BC9EFB49F6777
FB2AEEE2EB8F075976C43C4B67CA9FBF7A6793DEFF27E95A5B848A02289C88C9
3A2AD944F3580FF26EBA5CC6ECB8FBAB901D2D088FD73D77FFD37BD5E5> |-
/t <1C60D8A8C9B7361F02ABAC4B88558ED45AD48BB47F33DF55D153BC680385
C041A9A7CC8EFBEB2F6958628B90E5A09707732C2B9C8BE58E32FEE31515CC45
5B8509DCD77DD44DD5318363E5DE0E118371EAD4DD54AB50D9B4D31EE3878105
952E83F3E5CED4D3FF44658B026943D5> |-
/u <1C60D8A8C9B7D8BE167C87EBB825DE3509B48284D8B27ABC6A3CD087EF95
FABF1A5E99109EA07754EE539C5FE49715B7FF5904ADA209F29D77F15305AC5B
78EA6378AF63936C8677F8512890C63D37B33302D0D6DB755BEC61D0A0AB3F77
86F1106A4AB9271C84E5313A6A338D6C60A9B35CD058CAF1AB94837B11716F03
F58384CADCD4294DA0670AFE91138F9B39A191E15840221D53FD5223> |-
/w <1C60D8A8C9B6FF86F568AE24EE5AE2778A00BED4CC1685EC0FE085A6CBC7
0125C9D1C740501BA3E469DE7C208E11472DA2BD52376D81EA3193BFA5AB12B4
8A9D1150456FEF9DC4D26622A85A4EDF53B90EA8FD66FEF9CD79725E73C6BFE1
E3D493D61E66B87068E48FE0F315147B62BB99C994CC5D7B86A6CD5E188ABA2E
F8BBFF47A9EA8F89F812B905A2632C631BB43B6285D0489F5B01153EEF9576CD
ED65293EDC66899BA32AF923D7084B69F565BC111572> |-
/multiply <1C60D8A8C9B7DDB68948213DB173B873ABFF798167C203E9B1827
0C00660C52AACD56748D1225089B994EE5A3C82AAFDC9DAED935E773944A4B2B
E2134> |-
/.notdef <1C60D8A8C9B825FA0C55D94CF30B04E91930F79B2A7531B6DFEACE
089BFA0CCAAA1D14> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/ZLTSUO+NewCenturySchlbk-Roman /LXAAAA+NewCenturySchlbk-Roman findfont ct_VMDictPut
/ZLTSUO+NewCenturySchlbk-Roman*1 
[32{/.notdef}rp /space /endash 11{/.notdef}rp /hyphen /period /slash /zero 
/one /two /three /four /five /six /seven /eight 
/nine 3{/.notdef}rp /equal 10{/.notdef}rp /H 5{/.notdef}rp /N 8{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /.notdef /e /f 
/g /h /.notdef /j /k /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w 95{/.notdef}rp /multiply 40{/.notdef}rp]
ZLTSUO+NewCenturySchlbk-Roman nf
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.13 210.083 mo
(1 newton=1 kg-m/sec)
[4.27834 2.5667 4.70575 3.84305 6.00398 2.98036 3.84306 65.1041 19.094 4.28613 2.1236 4.56601 
4.13068 2.54483 6.86694 2.11743 3.55536 3.84308 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
335.029 207.448 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
278.404 221.275 mo
(=0.012 kgf)
[19.0956 4.27213 2.11118 4.27216 4.27213 4.27209 1.79092 4.55978 4.12448 0 ]xsh
185.126 232.251 mo
(1 kgf=9.81 N)
[4.24413 2.2791 4.53178 4.0965 78.0872 19.0909 4.22861 2.08319 4.24411 4.2442 1.51727 0 
]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.834 251.785 mo
(Pressure)
[5.83769 3.97205 4.39969 3.8244 3.8244 5.26241 3.97203 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.126 269.345 mo
(1 bar=750.06 mm Hg)
[4.24724 1.56863 4.24724 4.24727 78.9521 19.094 4.24725 4.24722 4.24728 2.0863 4.24722 4.24728 
1.56863 6.83582 6.83588 1.5686 6.40033 0 ]xsh
278.404 280.538 mo
(=0.9869 atm)
[19.0933 4.1843 2.02335 4.1843 4.1843 4.18427 4.1843 1.47455 4.18433 2.88626 0 ]xsh
278.404 291.514 mo
(=10)
[19.0949 4.01483 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
305.839 289.094 mo
(5)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
308.912 291.508 mo
( N/m)
[1.50021 6.22321 2.04901 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
325.372 289.094 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
278.404 302.702 mo
(=10)
[19.0949 4.23245 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
306.058 300.068 mo
(3)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
308.912 302.702 mo
( kg/m-sec)
[1.6969 4.55664 4.12137 2.10806 6.85764 2.53552 3.54605 3.83374 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
341.833 300.068 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.126 319.382 mo
(1 N/m)
[4.25424 1.54454 6.26753 2.09331 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
205.977 316.748 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
278.404 319.382 mo
(=1 pascal)
[19.0964 4.16409 1.45435 4.30411 4.16406 3.44116 3.29349 4.16409 0 ]xsh
278.404 330.575 mo
(=10 )
[19.0909 4.54724 4.5473 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
307.595 327.942 mo
(! 5)
[3.04141 1.15005 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
314.838 330.575 mo
( bar)
[1.57874 4.28845 4.28845 0 ]xsh
278.404 341.769 mo
(=10 )
[19.0933 4.45636 4.45636 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
307.814 339.135 mo
(! 2)
[2.97281 1.21866 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
315.057 341.769 mo
( kg/m-sec)
[1.76373 4.57843 4.14313 2.12985 6.87936 2.55725 3.56784 3.8555 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
347.979 339.135 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.127 358.449 mo
(1 atm=760 mm Hg)
[4.25037 1.5585 4.25037 2.95236 80.2116 19.0971 4.25037 4.25034 4.25037 1.71402 6.83896 6.83896 
1.71396 6.40344 0 ]xsh
278.405 369.425 mo
(=1.03 kgf/cm)
[19.0971 4.26587 2.10498 4.26593 4.2659 1.64789 4.55356 4.11826 2.53238 2.10501 3.39532 0 
]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
337.663 367.009 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
340.736 369.423 mo
( = 1.01325 bar)
[1.65567 4.66241 1.65567 4.27368 2.11276 4.27368 4.27368 4.27368 4.27368 4.27368 1.65567 4.27365 
4.27368 0 ]xsh
278.403 380.616 mo
(=1.01325 \327 10)
[19.0933 4.24646 2.08557 4.24646 4.24646 4.24646 4.24646 4.24649 1.56006 4.63519 1.56006 4.24649 
0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
341.395 377.983 mo
(5)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
344.248 380.616 mo
( N/m)
[1.50021 6.22321 2.04901 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
360.928 377.983 mo
(2)sh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.839 400.15 mo
(Work, Energy or Heat)
[7.57343 4.6972 3.98215 5.13274 2.10886 2.08791 5.84779 5.27249 4.40982 3.98213 4.69719 4.69722 
2.08794 4.69719 3.98213 2.08794 6.71049 4.40981 4.69722 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.131 417.71 mo
(1 joule=1 newton metre)
[4.26981 1.92929 2.24884 3.8345 4.6972 2.3965 73.9024 19.0933 4.26981 2.47342 4.6972 3.83453 
5.99542 2.9718 3.83453 4.69717 2.47345 6.85837 3.83453 2.97177 3.39923 0 ]xsh
278.41 428.686 mo
(=1 watt-sec)
[19.0918 4.26047 1.78003 5.98615 4.26044 2.96246 2.96246 2.52695 3.53754 3.8252 0 ]xsh
278.41 439.879 mo
(=2.7778 \327 10 )
[19.0918 4.29932 2.1384 4.29935 4.29935 4.29929 4.29935 1.80338 4.68799 1.80341 4.29935 4.29929 
0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
339.42 437.241 mo
(! 7)
[2.9953 1.19562 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
346.882 439.875 mo
( kWh)
[1.75519 4.56985 7.58591 0 ]xsh
278.409 451.069 mo
(=0.239 cal)
[19.094 4.16953 2.00858 4.16953 4.16953 4.16949 1.46057 3.29898 4.16949 0 ]xsh
278.409 462.262 mo
(=0.239 \327 10 )
[19.0918 4.32266 2.16168 4.32269 4.32263 4.32263 1.71945 4.71136 1.71942 4.32266 4.32266 0 
]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
335.03 459.628 mo
(! 3)
[3.01837 1.1731 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
342.273 462.262 mo
( kcal)
[1.686 4.59167 3.43341 4.30399 0 ]xsh
185.131 478.943 mo
(1 cal=4.184 joule)
[4.2558 1.53908 3.38522 4.2558 79.9275 19.0948 4.25583 2.09488 4.2558 4.2558 4.2558 1.53906 
2.23486 3.82056 4.6832 2.38254 0 ]xsh
278.409 490.137 mo
(=1.1622 \327 10 )
[19.0956 4.29544 2.13452 4.29541 4.29547 4.29544 4.29544 1.81424 4.68417 1.81427 4.29544 4.29547 
0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
339.64 487.502 mo
(!  6)
[3.00574 1.25156 1.25156 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
348.199 490.136 mo
( kWh)
[1.75519 4.56985 7.58591 0 ]xsh
185.126 506.599 mo
(1 kcal=4.184 \327 10)
[4.27135 1.62071 4.55899 3.40076 4.27136 75.0927 19.0948 4.27136 2.11041 4.27133 4.27136 4.27133 
1.69067 4.66006 1.69067 4.2713 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
333.275 504.182 mo
(3)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
336.348 506.597 mo
( joule)
[1.68445 2.28149 3.86716 4.72983 2.4292 0 ]xsh
278.407 517.79 mo
(=427 kgfm)
[19.0971 4.25815 4.25815 4.25812 2.05212 4.54578 4.11047 2.5246 0 ]xsh
278.407 528.983 mo
(=1.1622 \327 10)
[19.098 4.26666 2.10574 4.26666 4.26669 4.26669 4.26669 1.73959 4.65543 1.73962 4.26669 0 
]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
337.665 526.349 mo
( ! 3)
[1.23621 3.03592 1.23624 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
346.225 528.983 mo
( kWh)
[1.72485 4.58469 7.60062 0 ]xsh
185.126 545.665 mo
(1 kWh=8.6 \327 10)
[4.27135 2.18037 4.55901 7.57498 74.7627 19.0949 4.27136 2.11041 4.27133 1.6207 4.6601 1.6207 
4.27133 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
324.717 543.03 mo
(5)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
327.57 545.664 mo
( cal)
[1.54529 3.38446 4.25504 0 ]xsh
278.404 556.857 mo
(=860 kcal)
[19.098 4.22781 4.22781 4.22781 1.5181 4.51547 3.35721 4.22784 0 ]xsh
278.404 568.05 mo
(=3.6 \327 10)
[19.0949 4.26355 2.10266 4.26358 1.78314 4.65231 1.78314 4.26355 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
324.936 565.417 mo
(6)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
328.009 568.05 mo
( joule)
[1.75751 2.26364 3.84927 4.71198 2.41129 0 ]xsh
185.13 587.584 mo
(1 kgfm=)
[4.23947 2.30707 4.52713 4.09184 2.50594 75.6063 0 ]xsh
.438955 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
302.987 585.608 mo
317.033 585.608 li
.75 .679688 .669922 .902344 cmyk
@
ZLTSUO+NewCenturySchlbk-Roman*1 [7.90119 0 0 -7.90119 0 0 ]msf
307.596 582.532 mo
(1)sh
303.646 593.728 mo
(427)
[4.17023 4.39148 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: WGNBAA+MSTT31c537 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGNBAA+MSTT31c537 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /G46 put
dup 71 /G47 put
dup 72 /G48 put
dup 73 /G49 put
dup 74 /G4A put
dup 75 /G4B put
def
/FontBBox {0 -147 228 463} def
end
systemdict begin
dup /Private
8 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-250 -0 2200 2200] def
/BlueScale 0.004 def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/G46 <1C60D8A8C9B8A9659FBC3291E50A89DECDDD9B0B024BAA068285C4ADC2
85F0AF444895892D8BBA1561C2A95A1BBD1A9D7CDFB07CB02333CB4139CF44D8
9F8579FCE09229698BE129> |-
/G47 <1C60D8A8C9B8A965B9C6B7E0B9EA23AE9EF38E181854> |-
/G48 <1C60D8A8C9B8A965B9C6B7E0BE04B4CB04F3A5989F326E4E30E94168B0
9F11DA1F3307E3501059871A7728C0981305CCEB8E207E4BB40E87AE565474F6
60FBD9F48280527801EB4B> |-
/G49 <1C60D8A8C9B8A965F7639DDCBC60D8088705E1F89BA03523BA4B3174BE
2FD1C673C3660655CEE703A0622C7819EA609608B72FDB486EB62B54F6DDBFD9
972132DDB6703AE481F112CE929D067C7B9623> |-
/G4A <1C60D8A8C9B8A965F745CDF4CF1CD10A3918267C1C1620> |-
/G4B <1C60D8A8C9B8A965F745CDF4CF1BF64EBA34711F9E0A07A50847083BA7
62C6FC5761C64F4EF5DB8530B01C67A0995D997F5378300175EA9ABBF02641BD
DB80EE513F4D21661DDDBE55CDEDB6735CF97A> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/ZLTSUP+MSTT31c537 /WGNBAA+MSTT31c537 findfont ct_VMDictPut
/ZLTSUP+MSTT31c537*1 
[70{/.notdef}rp /G46 /G47 /G48 /G49 /G4A /G4B 180{/.notdef}rp]
ZLTSUP+MSTT31c537 nf
ZLTSUP+MSTT31c537*1 [15.5829 0 0 -15.5829 0 0 ]msf
299.037 582.754 mo
(F)sh
299.037 593.288 mo
(H)sh
299.037 588.894 mo
(G)sh
317.253 582.754 mo
(I)sh
317.253 593.288 mo
(K)sh
317.253 588.894 mo
(J)sh
.699219 .675781 .640625 .738281 cmyk
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
322.959 587.583 mo
( kcal = 9.81 joules)
[1.84537 4.5683 3.4101 4.2807 2.40741 1.84531 4.6694 1.84534 4.28067 2.11975 4.28067 4.28067 
1.84537 2.25977 3.84537 4.7081 2.40738 3.8454 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: PSJBAA+NewCenturySchlbk-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUN+NewCenturySchlbk-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B59F85E7743D0528DB369700BDF7454677AEDB8FC078C2A61D
23410545630297DCB003633C0CB9A1D12F7934DF66E0F0AA0E90D025211A1F54
753807F299AC29901705C69CCE8994BD2110AC060E1F9E02A85EE7F801566460
B96F12C0CA4F4C636B9784ACCC96F78C7834174955497644C97E2F973BBF4871
9CDEE610B6E9E049D342C4318C46AA9049879BEB62BEC73ADB1C2B9430412861
2977F08D87CE47861634A2C5EC5EDFB923> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUN+NewCenturySchlbk-Bold /Encoding get
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUN+NewCenturySchlbk-Bold*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 20{/.notdef}rp /A /B /C 
/.notdef /E /F /.notdef /H 3{/.notdef}rp /L 3{/.notdef}rp 
/P 3{/.notdef}rp /T /.notdef /V /W 9{/.notdef}rp /a 
/.notdef /c /.notdef /e /.notdef /g /.notdef /i 
/.notdef /k 2{/.notdef}rp /n /o 2{/.notdef}rp /r /s 
/t /u /v /w /.notdef /y 134{/.notdef}rp]
ZLTSUN+NewCenturySchlbk-Bold nf
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.841 613.918 mo
(Power)
[5.75061 4.60004 6.76122 4.31262 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.132 631.477 mo
(1 watt=1 joule/sec = 0.86 kcal/h)
[4.27524 1.53441 6.0009 4.27524 2.97723 74.3477 19.0909 4.28296 1.86093 2.25427 3.83997 4.70267 
2.40192 3.83997 2.11432 3.55231 3.83994 3.40469 1.86084 4.66397 1.86087 4.27524 2.11429 4.27527 
4.27521 1.8609 4.56293 3.40463 4.27524 2.40195 2.11432 0 ]xsh
185.132 642.671 mo
(1 h.p.=75 mkgf/sec = 0.1757 kcal/sec)
[4.27524 1.53441 4.70265 2.1143 4.41524 76.3379 19.0909 4.27521 4.27527 1.86865 6.86383 4.56287 
4.12756 2.54175 2.11429 3.55234 3.83994 3.40466 1.86865 4.66397 1.86865 4.27527 2.11426 4.27527 
4.27524 4.27524 4.27524 1.86868 4.56287 3.40469 4.27521 2.40195 2.11432 3.55228 3.84 0 
]xsh
278.411 653.647 mo
(=735.3 watt)
[19.0909 4.20529 4.20526 4.20529 2.04434 4.20526 1.49561 5.93091 4.20526 2.90732 0 ]xsh
185.132 664.84 mo
(1 kW=1000 watts)
[4.20216 2.06766 4.48979 82.4729 19.0956 4.20218 4.20215 4.20215 4.20218 1.48468 5.92783 4.20218 
2.90417 2.90417 0 ]xsh
278.411 676.034 mo
(=860 kcal/h)
[19.0918 4.23715 4.23715 4.23712 1.52744 4.52481 3.36658 4.23715 2.36386 2.07617 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 17 2
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (17)]
[/TrimBox [25.439422607422 36 569.560546875 806]]
[/BleedBox [25.439422607422 36 569.560546875 806]]
[/ArtBox [48.7035 68.9216 546.297 773.078 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
25.4394 36 mo
25.4394 806 li
569.561 806 li
569.561 36 li
cp
clp
[.914489 0 0 .914489 25.4394 36 ]ct
gsave
25.4395 36 mo
25.4395 806 li
569.561 806 li
569.561 36 li
cp
clp
false sop
/1 
[/DeviceCMYK] /CSA add_res
.699219 .675781 .640625 .738281 cmyk
true set_gvm
%%IncludeResource: font Times-Roman
/ZLTSUK+Times-Roman*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B 
/C /D /E /.notdef /G /H /I 2{/.notdef}rp 
/L /M /N /O 2{/.notdef}rp /R /S /T 
4{/.notdef}rp /Y 166{/.notdef}rp]
ZLTSUK+Times-Roman nf
reset_gvm
ZLTSUK+Times-Roman*1 [9.14489 0 0 -9.14489 0 0 ]msf
99.9703 142.922 mo
(\()sh
ZLTSUL+Times-Italic*1 [9.14489 0 0 -9.14489 0 0 ]msf
105.238 142.922 mo
(xx)
[3.84059 0 ]xsh
ZLTSUK+Times-Roman*1 [9.14489 0 0 -9.14489 0 0 ]msf
113.358 142.922 mo
( \))
[2.22221 0 ]xsh
ZLTSUK+Times-Roman*1 [7.31591 0 0 -7.31591 0 0 ]msf
367.513 142.922 mo
(ENGINEERING THERMODYNAMICS)
[4.68207 5.49402 5.49405 2.64825 5.49402 4.68207 4.68207 5.09177 2.64825 5.49405 5.49399 2.95569 
4.68201 5.49405 4.68207 5.09177 6.71585 5.49405 5.49402 5.49402 5.49405 5.49405 6.71582 2.64832 
5.09174 0 ]xsh
ZLTSUM+Helvetica*1 [7.31591 0 0 -7.31591 0 0 ]msf
99.9702 744.071 mo
(dharm)
[4.04203 4.04204 4.04203 2.41048 0 ]xsh
99.9702 754.825 mo
(\\M-therm\\C-steam.pm5)
[1.96871 6.02894 2.37098 1.9687 4.00252 4.00253 2.37099 6.02893 1.9687 5.21675 2.37099 3.59282 
1.96872 4.00252 4.00253 6.02893 1.96872 4.00252 6.02895 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: PSJBAA+NewCenturySchlbk-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUN+NewCenturySchlbk-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C784D4A7AA6F8699D999BA0138EF45C> |-
/D <1C60D8A8C9B6B41CBB7228318097D89028673FB4B24ECADB91E9E7971B79
02681128AD536DA7EDA2AD54400B5B9C012806A512B8087B4F3ACE84D122B992
AFE66C3EF7D687F6BEC7DBA37DF21C546725AC06E5B3272A1F19E1E21E7B51DA
5070011D132FED6AEEDA0B8E728532218F107B3C75734A4D65A1F83E1B37719F
A989A732B258443D418243F453C084B52B3A4E7EF0AA4239A2305053BBD9D513
59F31F2ED2> |-
/G <1C60D8A8C9B6B41CB596ACCA2C3D498C5277DE2AA65B707CF55611D44C62
A72852C635CEA48DF070B8585B76E863CCB5AB9B3FD391BBFDE32C8721B270A8
FF64B276C95245D9670BBF65995B5B3D03C1800D8324B4046C4922AA67C27956
99D646973B40A9BB7EF8F0D0BC7B7DB2B622FA256AE696CD74F1FD9C35E90D87
79728022DFE626890D08429FADDE393ACAD4C543732AEDD5AC547D179F4572C0
C58CC292CFE8A8ADCB4A463231F4F2604DE860F9141664671CF829B9> |-
/I <1C60D8A8C9B77FE2CE1295D812E7FF5C129A9D38B412043B6E61C0306157
56F8EB7BBD90C8E86205F65CBEA3379BE7264332A29839E210ECDEFC87E9EA72
97EC0134ED048EB66B155B1DA2124899B21DB6FB4D0C9E6E3EDC7E2B707AC528
E17B2602081019D995E0> |-
/M <1C60D8A8C9B5FBBABDE2AC24C9762C3C8C1CB18B2E0F169E1CA8F2B67A48
59E5F7E33335AF988770AA3F18F59066EC73910D530888475F1077A7C3102039
68BF8A5EC0524ACED6A3286E73F9200D040810F3A82D42C9334E5D669C96C7A0
65484643B6585F5EC383202B443CD248CD758A941F7E5BA37ADEF33534E70B69
C6B07DD2A249F71F362B8227D480C85AC331BD574BAA704D56B1CC79F721A1DC
C3B42D4B86116BACECC2130009204B807186> |-
/N <1C60D8A8C9B6B41CBB3A439B6B577734D9D3DBC15FE2BB7D0EA8A964F89D
4F530D5C4326202477BDF4F3A8FEBFBA2EE638601A13008020D6D2DB9ED2B271
6EFC4E5638C67ABFBAE38D7B89DEC650224A9E87D4C77497BD919CC8C36F3639
FAD66B389CF1FB81B94D71981224EB0E234E8E59A4A9E0B51042E07B10AF41F1
DCA33F73415237A74D96> |-
/O <1C60D8A8C9B6B41CB4F9FA2B97DE2611AC41124D4759AFFBF82628216D9B
A8210501BE3DB3D17E3B629D5CDDA317125D27D85E21B6A525F0F96FD5456C7D
F88C457DE97E6637889A61F8A991823DE804EB36A2C2F4D200160C0252B2BB73
FCD3972D3B428D9270431850620063360F6C4A67F816DA0C66965C17DDC2B537
1EADAAC6D0D7BACB116700> |-
/R <1C60D8A8C9B6A283882E027A668F0F5F365DA6AB772310E246C322F2E830
94DB86083964CCB2D90216D3ED6B5E8E4739C635B5320A8050EAEBE22F1FF4A5
5F5419B804AB318A4D67B0CE999561E33DF669F0D7942C4D8A7DA23E7D9F58E5
F7092D77C0D15A5E5096EA3E4F5D790DBF3F9F8B6C87B8A3732E15EF9A562228
E94C8B66C8837D60E365DC93816B621C4095E1174348060A4125F0C76553F7A4
89DD1D32C282F7ACB0EF4904B84B60BF5262EDC4913BB5EA360E46C3DBDC8E89
77874323A4A71875A967BDDA624C46AA265AB0C00C4687463CA0E2EA5C732577
F02B11F854DAF915A0B2ED06E96AFA69BEB3FE772CCA005391A118D09B9CE5CC
68611AB164EA7CFAB76B> |-
/S <1C60D8A8C9B64EDFFB91E26B8510041684BDE8E5E45B6671C78B52AE7518
E51E77A194F488DEFCD152275B6840297D83536F6E4C8268593C0281DE3C13EC
B9D6C090677BF444EE873257E2CBAFE17FE45DB66699A57ABFBCE35E00D89018
8F1ADF5A6C693DADA2FF920D9D49BFB285C22FA4CD077B69A754DC3623691731
10DBE28970A8E0EE44593CB2E255EC71B5A9516076132735C1A3DC0D5112763C
B0E6F59D990CD246C2B36532F13A3C0A6C5C47399929B49FE569DF14C4F4BD5E> |-
/U <1C60D8A8C9B6B41CB5FA16844ED7952BD22528A0D00D4F8B6F66C86A0FB7
A81359369106D2DB212CA10CFA7753A88729759068AD100B2EBA0880FD671506
6F4BDC86233276C96DDABAB8F07016867EFF335EF4EB33247C3BE1C61EC26C6E
BE84A37D16C374ED68CFA1859BFC99FD2F90D00FB817E9CD383099B76FBEB253
46405FF83E04B1DFBE057D502E70E661018316ED8A0369527822A6A7E7F4FEF3
C216> |-
/X <1C60D8A8C9B6079F5841C9D1192C723A94F90243E2484390FF9212C1BA4F
555B45B605604EDBCF9DF577006BE6FCECC9E9D465302EF977F9F656407D7FA2
6730A541A1CB63484BEFCFEA06659A45CA710D239333695E6B04C5F0B8B9AEB4
A6B28FD7D8E3CE621A299316985C95DD29740222ACDB0C1B92FDF9966A43986C
362A4072547BFAB71F9C81B0D13395F9E4468CEE4788EA5374FF79A167F2F424
1CA393313E9E2D7B16AC720D09E58EA02B95ECCA3FC1C972CDB23DC028FA2C6D
23C019DEACE482C2FC7DF197C06281F119> |-
/d <1C60D8A8C9B64EDFFB6E19D65BAA6A03789F486F41C4A08ADF5A4EAFA10E
2F0BF07C502329BB390261E720672BF6330BD7A2B44460D2E66ED27807B6B0E2
643722CCB920897112E6198A18CC2519DEC8E8FE8420FE8FAD48F9527BBEBDF3
1E76E63B9D2FCEA6BB9022B7AF4CB2E0248CF2E2C085621C640138CA4773AD8B
DBBC8023ACD7FB4427BE63964F7F475B3E5FF89F79EEF79C858872786CFE099C
39FA494F26795CBCB3121E701B352BE4D3C5EAE80080> |-
/f <1C60D8A8C9B7361F0D9FD5F815E67D4915D7549637CE050847336AFB4055
858D2969CF77498762BFD885228200C2DC31DF14F90A79005C807DE386A151D7
A51C61A40796EB84BE5287784B8CE631BA42D9306A6B1F065BE2F6B0A463E6D2
B4B095CE5524F5201F495B367BC62132767C494F59888F255DFA65114514AAFA
1DDC36ADA41DAE532012CECA2728015AB467C774D3054F7A27F2B245EE4A2837
2803E29B54E22CF09ECCEB91B806CB656624FDD206> |-
/h <1C60D8A8C9B620B7E28D6F9D95A97E2875708E92D346AEF1DBDAC11B8086
DDB94B0883DA9DCC21E5585DA362D4BC6EB77E70D61128E2FBC0FB3A29BD25CB
F2C4DBA5147458DE64CA77A88CA9667EBD62C6186A3333B82E23E0534775072D
CDADFF014FE604F14DD7FD04A47BFF1D877234321391E1D09FB69BA3F21D0ED7
D072114AA2EE8D6AA8E2AF961C9ACEAD1892EBD21D41EAAE65A290E7CC7F48DE
657181BB226C27AF08C32509CB56865383576C551525FF4A1E06019F18ACD904
13E235F9> |-
/l <1C60D8A8C9B80A3F933F0A4E737D72B90E4DE9CAF74BF698C2B1CCCD4C75
1C0A7F024759E7C24E591F8EF7754F1A8335769C83D8EA4447EABB4135C6E70C
6EA321C86AD134864FEC64749873F62F813240A7D2C51E0A4D> |-
/m <1C60D8A8C9B5C521BFFD2C12CBB742FEA7B44E07C337B1DE892738E3ACA1
D7F8EE06FA3F2D5BA0237E9BA12988BEF8C97040E37256C7BB2B0411E60716DC
DFB961F18ABFCB40D8534A599E9D2DE8D32C7F4DA68CE954F5BDE56D2D177809
5488426ADA3C7FF58EA56CCB34C4039ED8B00C31BB753F647676E0B16E78D64E
4761E2C6B6EE1705F3195BB65D95414F1ACEB3043587D1E6793698AAC85E5EFC
017561F61384D747CB917FC0E8AA7D7442CCEEE35AECFF44842A75467061B4B5
3462CD12A1A22D2647C9B22A7E1CF86D8A38F4F7F4CECA972AD89DE87F5A5722
9F9B1F63FB2CDA965A0F8CB21DB49754E32BD87603CE3053BCFD36825031EB2D
7CF42E6638711B647E9BF7DF45847434FE702EAFE43A711E798060368B9519EC
A6AC2E056AEB0CE20B2C42> |-
/p <1C60D8A8C9B64EDFEC99846C9440EA603D4D0F3385306F48EB114F896927
71B8BCD645A413FE2299AED33B625D8F5CB2538AF0F338125D3C2B5907B45856
2111F548DFDD5CC8BC4B682B4251EA4A42B604E5A1355E595F0F47FB6B57E184
005C7737C805B16BD07E8694703367FD06FD4CB5E54525D65DF458AFF68AC27B
D17CC83A5A519A4EC13BADD877C1AE8BC0855619C31337B1CE282C4298291C09
732633E8CB49E6966792888C3F0D6E8021E3180936BBB1B82D36244C41A90126
70DFF466> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUN+NewCenturySchlbk-Bold /Encoding get
dup 45 /hyphen put
dup 68 /D put
dup 71 /G put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 88 /X put
dup 100 /d put
dup 102 /f put
dup 104 /h put
dup 108 /l put
dup 109 /m put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUN+NewCenturySchlbk-Bold*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma /hyphen 19{/.notdef}rp /A /B 
/C /D /E /F /G /H /I 2{/.notdef}rp 
/L /M /N /O /P /.notdef /R /S 
/T /U /V /W /X 8{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /.notdef /y 134{/.notdef}rp]
ZLTSUN+NewCenturySchlbk-Bold nf
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.839 164.211 mo
(Specific heat)
[5.03947 5.03943 4.31651 4.17653 2.73064 2.87851 2.73065 4.17651 1.53679 5.17923 4.31653 4.60391 
0 ]xsh
true set_gvm
%ADOBeginSubsetFont: LXAAAA+NewCenturySchlbk-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUO+NewCenturySchlbk-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C39268D498F5985B78D82187D6AE2D6140457
4FC935DC88FAD730BE24690CC53A58CB07057E353736E34328B53CFB1BF2FBA3
5A62B241CA4E9212D6BA23DF8884B9> |-
/C <1C60D8A8C9B6079F6CBF71FA3A7A71D8BADD85A95A1AEF63760408AB39BF
0397E026181196EC12CDDB147BD40591A96FDAA5B1B260F9F545A5F7D9971AE3
75E15E2FD3BC298788221D574036BB31F5EC955627D7351031F15A19DB9FEB5E
381F77BB74C1335F39FE679C9E71DA938102B473364B3E629CDFFAC8A682AF3C
8DC5349EAD1E7E> |-
/J <1C60D8A8C9B7EF322BC6FB79029B5C6768DF7F319E447346B1A98B115149
7040347D74A97937A1B5EA55A7B806C7C9B382EB15D00DA74103D687390B83C0
03B537D4556382CA2B9BED2D2FD74E8067B6D7CE4AADF8C60CC1C5A05EF0109C
14F1F95D52C2EAD678C37B0F0DF29FB5C4E2AC2422DC842DAC268D4C0DB41027
5F4E77400AF6FA437985E43CBF9FF12B95A5A99DE04B5C0551A192CF66501B80
82D9D2E1ACC297FFCCC3A05907C08FD062B9D6639A> |-
/K <1C60D8A8C9B6FF86F5FA224829FEC2EDA10A9C9B5438E565929A6436311C
343CB04F21D999873BF95BA39078C1D1DCD174D51A9E6B58A18D207187494797
D16341C475A3E977D2D5695A1367C2BE3D1DA368444F4FBA04D4B2DF05239913
3957D1C82D441544F04E6B88FEE1F60FD0DB2C3A68DF8B26142914D85B5B5EB2
CFCD7E6C9C8DA101A2C6DC14A541318EE873E27701ED7527164C618ADF19D786
C685B2B88D1768AEC351B37CE3ED28A52CD8B9E2D267BD9192979612D890E4C2
BEACC4F0B631B4F3BF5BA47308346553E030A90EB358> |-
/U <1C60D8A8C9B6A28386D497F99964725CE7557F2B7C7E099C4977BEBE7ED0
3E62337AFC747B1F5CE25B6E5B5DCD57866F888F7DE0DA5AB895AF64DF90B5E6
C3CBEA7129024319493BDED99916A6EC79556A73E6B734FC125FDEFC01DF70C3
3816E01E06AA9F41D2646A204EF700107A1FD037891DB7B5A1036D1FA6727575
285EF2D18635E505B318C6DCBB000A9CA017B17D32A99BE4C499811222496F6C
FF1A> |-
/V <1C60D8A8C9B6079F62466EB0ACB1AC8DB09569AA591CDEF136514D6252F7
54A50A410DC65FB38DDEA40C30B9D2FB1238608E6FE6894212E80D59C5371671
64A13795D2E2DE13368FD5CAED989FEA9549B048B6338163BA7AEC27F4140425
A7A30D133F063A6612EDDE7E43E6797FB46519> |-
/i <1C60D8A8C9B831A99B20642D1566FB42C98B21F3A129310BDE118A0440BD
63794CEC34FF67AFFE17248E3BA877CDCAC544EC395E3591A0E46ED8BD446ED9
A131FE49FB7E7DB9E9414EA0E846610935463ABE7F66275D37A437DB3CF71DDD
D7F42D396717607BA9432214345A9AC3C82CF6131BB403B3CAD53DE6867973C3
829052BC43D3CDFBBF4920603FC778E52F8F6194> |-
/v <1C60D8A8C9B78256D21BD17F388F5211ACE6C96295CA308C71F54F1AEFC2
C9B787702EB619FC6B45C886A1152E031630DA5A6080015238C23A5D296018F8
BE5D7E3AAFA9E8B4D7042EEB404B26F1E2B89D97517E741AC098E7AEE0812450
AD83387A2F8490362A7CC61CA5A56793D5C5A3A7> |-
/degree <1C60D8A8C9B70B6BA0440F263BD2CFAC5C3202C88E7750230EFF16B
26A9FF1751410F4366BEEF1FCC4CB78A2C09E5E934C8582F8C3CDDAA083F5F75
BB3F5681B44C0C718E99AEC3F6C01BA0E875E1FD04AF2A2B80E1B5563ADB1AEA
74757309131546697AD3FCF320BAEB69813314CF369A3A554C7DEC6A5A5BCDB6
892B1DEBBBBC2C97D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUO+NewCenturySchlbk-Roman /Encoding get
dup 40 /parenleft put
dup 67 /C put
dup 74 /J put
dup 75 /K put
dup 85 /U put
dup 86 /V put
dup 105 /i put
dup 118 /v put
dup 176 /degree put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUO+NewCenturySchlbk-Roman*1 
[32{/.notdef}rp /space /endash 6{/.notdef}rp /parenleft 4{/.notdef}rp /hyphen /period 
/slash /zero /one /two /three /four /five /six 
/seven /eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C 4{/.notdef}rp 
/H /.notdef /J /K 2{/.notdef}rp /N 6{/.notdef}rp /U 
/V /W 9{/.notdef}rp /a /b /c /.notdef /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w 56{/.notdef}rp /degree 38{/.notdef}rp /multiply 40{/.notdef}rp]
ZLTSUO+NewCenturySchlbk-Roman nf
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.131 181.77 mo
(1 kcal/kg - \260K=4.18 kJ/kg-K)
[4.28145 2.17648 4.56909 3.41086 4.28145 2.40817 2.12051 4.56912 4.13377 2.17648 2.54796 2.17645 
3.06877 51.2568 19.0971 4.28149 2.12048 4.28146 4.28143 2.10654 4.56909 4.28146 2.12054 4.56912 
4.13376 2.54794 0 ]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.839 201.305 mo
(Thermal conductivity)
[5.55858 5.27094 4.40825 3.98059 7.43187 4.69566 2.68257 2.58929 4.26822 4.69566 5.27094 5.1312 
5.27095 4.26822 3.25766 2.82234 4.69568 2.82234 3.25766 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.132 218.864 mo
(1 watt/m-K=0.8598 kcal/h-m-\260C)
[4.26746 1.77849 5.9931 4.26746 2.96947 2.96947 2.10654 6.85605 2.53397 59.5984 19.0909 4.26743 
2.10654 4.26746 4.26746 4.26746 4.26749 1.65411 4.55508 3.39694 4.26746 2.39417 2.10654 4.69489 
2.53394 6.85602 2.534 3.05475 0 ]xsh
185.131 230.057 mo
(1 kcal/h-m-\260C=1.16123 watt/m-K)
[4.28145 2.30318 4.56911 3.41086 4.28145 2.40819 2.1205 4.70889 2.54793 6.87004 2.54796 3.06874 
50.1677 19.091 4.22159 2.06067 4.22162 4.22159 4.22162 4.22159 4.22162 1.51187 5.94724 4.22159 
2.92361 2.92361 2.06067 6.81015 2.4881 0 ]xsh
278.41 241.033 mo
(=1.16123 joules/s-m-K)
[19.0918 4.26047 2.09952 4.26047 4.26044 4.26047 4.26047 4.26044 1.55078 2.23953 3.82516 4.68787 
2.38718 3.8252 3.53751 2.09955 3.53751 2.52695 6.84906 2.52695 0 ]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
154.84 260.567 mo
(Heat transfer co-efficient)
[6.70738 4.40669 4.69409 3.2561 1.94722 3.25609 3.97903 4.69409 5.26939 3.83139 2.9687 4.40668 
3.97903 1.94724 4.26666 4.69412 2.53314 4.40671 2.9687 2.96867 2.8208 4.26666 2.8208 4.40671 
5.26938 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
185.132 278.127 mo
(1 watt/m)
[4.25346 1.54375 5.97914 4.25345 2.95549 2.95546 2.09254 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
216.074 275.486 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
219.147 278.12 mo
(-K=0.86 kcal/m)
[2.52849 56.7496 19.0933 4.26202 2.10107 4.26205 4.26199 1.64716 4.54968 3.39142 4.26202 2.38873 
2.1011 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
337.665 275.486 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
340.738 278.12 mo
(-h-\260C)
[2.53549 4.69641 2.53552 3.05634 0 ]xsh
185.127 289.313 mo
(1 kcal/m)
[4.25891 2.00626 4.54654 3.38832 4.25891 2.38564 2.09795 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
214.978 286.68 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
218.05 289.313 mo
(-h-\260C=1.163 watt/m)
[2.53549 4.69644 2.53551 3.0563 47.5339 19.0993 4.22003 2.05911 4.22003 4.22003 4.22003 1.51035 
5.94571 4.22003 2.92206 2.92203 2.05908 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
342.932 286.68 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
346.005 289.313 mo
(-K)
[2.51297 0 ]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [9.14489 0 0 -9.14489 0 0 ]msf
119.943 317.845 mo
(IMPORTANT ENGINEERING CONSTANTS AND EXPRESSIONS IN )
[3.94786 8.8587 6.82854 7.50508 7.34064 6.49013 6.82855 7.50507 6.49016 1.85828 6.82855 7.50507 
7.50507 3.94785 7.50507 6.82854 6.82854 7.34067 3.94783 7.50508 7.50504 1.85831 7.00223 7.50507 
7.50507 5.9873 6.49014 6.82852 7.50507 6.49011 5.98734 1.85831 6.82852 7.50507 7.50504 1.85834 
6.82855 6.49008 6.82855 7.34064 6.82852 5.9873 5.9873 3.94788 7.50507 7.50507 5.98724 1.85834 
3.94781 7.50513 0 ]xsh
431.964 317.845 mo
(SI UNITS)
[5.9873 3.94785 1.85828 7.50513 7.5051 3.94781 6.4902 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: SODBAA+NewCenturySchlbk-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SODBAA+NewCenturySchlbk-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 46 /period put
dup 48 /zero put
dup 69 /E put
dup 73 /I put
dup 75 /K put
dup 77 /M put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-101 -206 974 746} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
25 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/period <1C60D8A8C9B854D0AD1518BB69D6E1D73EB27DCD2CE5A7E9B987BED
14901105DE0F7F604EE692772DB4CC17FD526694ABCDC7841A2451D25EDD26BB
D9C3993DB53E4C02A04> |-
/zero <1C60D8A8C9B7EF322B7FB0FC6052E630B2BDEA63D629267B96AFD942F
F5DC0E8782EC4F58108011744B3FCCFDEC7556C5E96B021D32DC29AA56682341
D043258B163E13686E74309738C30F69221F5D2246F0D12B4BB45733439D4EAA
230AFF14CB9E1086A57F0797AC3A277FCB7E85B41CE701CE9139D69479FA77FF
923180E47DD1973C1F1339B7DB2B5000CE3557A49369FE6B86CD6E759B983C2F
E1D3B94284612548E59B887F3D14942F7B36C9419A83C921C6886756E12> |-
/E <1C60D8A8C9B6079F62981D322E9A046C8426D2D94E094C3C955EB5CD5565
5DE6B697B84F43B494B9C5BA5A8B592903406DA718DF8425EF19EFD686FE5813
877665CE7C2A400EC7FF4695E94F553D65E4154E11E14E98033578C58A6995F0
7132D8E0E58A169062EB84B495CA21F8A3160E4B1C91816D0C914B508AAE3891
1D28D3868B751325B5FCBAAEBC0773A5BDC7041BE164271B414FAFF11B17327A
9A2AD0134B279A83D52A46A7029045679E93353E3AAEBDE8CACB7D351CFCD51C
28D529A14DC9A5123015> |-
/I <1C60D8A8C9B704CCF27667EE2F86EA2AC6BCE61AD74C6D3B790EF2BEBDA0
A836B905A0D0C5DD3DF7D8F13151793083A8C344A95AEE60D43C0B348A2B355C
0314436907E9745B3C6A6E8E42F4A53DD39A525CDC8FA906627A0C5776B0B661
DBAB1ADBB62556BEA7E9BD863AEBF80B50> |-
/K <1C60D8A8C9B6184AF248B914497FB3E165FB5BF56E0F8A94B63DA0D7AD8D
30086C246E7D6797FBC38C45C2441743D17C9E1C279C3D1882B186DBF65281F3
CA10F1D4A99EB292EE1E513133FA19B46B11B61F89170C25EBF3C8291A2CC300
F5AAA72AF43C1A10C0BFD1FE1F24A97922AE917A53911DE41C440061334A6582
C9C843B51231B64DA596094A72952C79B6CEEF0665B3B33D722EEB16E873240A
7AB6463E2CD46CF77DB84BC1CA3838F98C570ACAF017C7384253F0CDF9922AB1
17D53A5CC414291514BEEC3C0779A38FB1C21D10E8523971680ECC03DD1A91A7
12AD> |-
/M <1C60D8A8C9B5D6EF4228A5617D4F41DF6B3E16DB76D8B9998BCFF84B748A
D620CB50102E1B278F5D79645E1CA0A29C6EAE20CB43ECAE7B85D5BD97218A1F
E15A1D4A1360677D4A94583FEFCC7793A2A7458070CB7720A6ECA3496EF48880
63B7F3F5BA846F9D5EF5DABC3F894165F350BF050220CDD4678566380874A3F1
E618A217F29EF615AAA85430863B70079A7916FC1834F9E367BE4BC03C78753A
152018A19D05058D1384A5B3D23472E8AA04ED125D5C45B26C0764C6DC43> |-
/S <1C60D8A8C9B64EDFFBA237047315E97CD5BA7979979671278C24DD7E9165
18AFC14C6C0C42EA19BC9C6B94C7238AA77539719CC24ADF1EF695828FDF58B1
E39CFEE5116FD2A1A461AE55ABB62BE0CD44A391EDB33FEEA7AC8A1E1ACA5ACB
2BAEEBEA7ED05D1EFA26219F277D9AB52BB5CC46520845A7CB3DBF1524393062
1B9039F49D35E62E2707C5D8A22FFEAF376D109ADE7A4D3A2FF7AEE3B1E02D6F
B09BCD07DAF8533ADACC1E863BC5C2416E7F7FC8CEE5A10AAC53A8711D6E13DB
B463FA1222721909922385971A0B> |-
/a <1C60D8A8C9B7FD849AF81858E47FD8467638587484EC09EE6E2F69970EBE
21BC98555452E9C45ECD2B0E6FCD03B3FFF6BC4C65DDA91C22CD1CD13654FF18
488A7065E9762CA080CF9D3F02F5C247D46D55471B843126355A940C5DC1573A
D9683EADD74AE614BFECAFA809A5F36EDBB59429FF1110786A7134F091DD2142
8CA7FCBFB8E42B3B621E31567A7AD2F31049AA8F9F0964ECA1278639BA619CFC
86D9F4FCB7822E71EFA7DBCC80B80C41AB1EC245312AAEFFF44191A4CF518255
6843654B94300D0A38> |-
/c <1C60D8A8C9B77FE2CEF7F2FF7FF061F2F7736B392BBC3986EF55BA2B4D79
F0A3A802534F36C2777C543BF293EFB89E58FB46C23D0406E270683DFCFAA135
5A69B0FC512B5B515A345DF0681B963F66A99254D6B733E105D38E55BF95824B
17E5EE9FDD84915B9CC3051A68A32B5A572C1AB16FBBE442BAA791143CD0E013
4C63B7E639F2330B52153CB9E2D86D16A14DDB8D2322F3E4D66CB1F78DA7E944
9161C99A8DCF314B1486657D0F57B26AE7C53260F04B9E2EB8> |-
/d <1C60D8A8C9B7D8BE16EC0A470A5FD065810DC95AA5761F8A037F29A0C276
9F55110856B3E276E7A824C0B3BCCBDDA55F9611610E3FCCAADCF8655A078FED
E0EEE58EC20F5B602903649B8423250BCD4FC8FA7911E9B6404C75A82D67D190
DC3D3B8DC553CC03EC86DDD68A4FE5456F9A30EF0B598C501BDCBD1DABB4081C
A83197AF21C179A3D3B48EC719A1DBFB8EDA40EB8B9E969FEF7F13CA5941CB7F
3CEFAA7D9376CFF9A54DA55C19BB8623EBC97A89D4A776304B1C5E8633F4D4EE
0D308C0F2BE4F35D9E420ECF6C6601FF32B4765EBAC97D2CC4D5617DC9BC07E0> |-
/e <1C60D8A8C9B77FE2CEBDD59946C3C5E604996BB290566B06A56E20257944
EF216EE77251AF6DB0ADAE29C21A933D0A5E5071DCCABFF128A9F76A019594F5
862B3A30DD238E7F5C488050ACC22F1306ED5B882885057DED7B4EF0245FD725
0546DE384823155D8045891E103C7DFEAC8F293D330F3F118D732B368472B2CE
53A471E29CED1776579C904F62FB084E7CA81909790723C32E3F949C8B580C39
E860432411E1429D1EC076A471CD611B7834EBCB3149D3A9F7BCC3729EE80768
61E3334450B4> |-
/g <1C60D8A8C9B78256D202D3B21F9D0DE37780BCB76DB6C5C04130417FBF60
77D2FFCE47412683926C6545406377CAB084F5EE9771E8595547A0D2F4D75AA3
DD6A7DD16B37FECA132C065FBDD7EE203EF7591A664BB00DD871BF5654DF0037
BEC4E239062B5C8D86DB022700DBBE33FFE933ABEA18B8FEE5368F554DCCB1D1
D4E8C57AB6B552275D6E30A71B41E23F8429FCC847AB7F6F663E71419C8F761C
2FEA30B7D271125895D3204D5928BC1A2BF2120797044C756E3295825E28FF15
AFC279A23C79F97C202C9641539F27E5328E414A9F1B64B15EA340313D7BF329
B16906D75740D296B9ECA99DEC9C1150ACA5C1044F97F7EC011F2CBFD180868D
3FEB84C6B9C79DC8476FDC96E2E89D3241B83FBF0ACF1A6289343DC470FF1990
BED3725FFEEAC07E0FA9EBE9F951874C8C31D0BD4A2C64E781D4DDFBF70D29FC
5576D6573152802957DD945831F7AFDD58910CB47A824982AC9CE923285B0B66
41BE832E630A621136C6DBA0286F5D02F25ED4E6E94CC21F7E4CE6226F6BA2DC
0653F6FDA8A37EA6BE01A47DA4B973D481D7B2BD63FC1D3F92170D02F23B165D
511F35BD562A1471FC3B3A6E106C11A23199E7ADE744DA14E48BBF4079E9674D
C93C39F991B5352D2337C812EE72188E23BFCC5A5BD34F1BD6ED8B81> |-
/i <1C60D8A8C9B81F2C65A9D1CCC03F55905B9A95C6785AC9302C3D7BE032CC
0BC1E1C56304045148A7BDF208217B299E7251579A9CD8891B6617E2651D9CFD
F77A03278C9B6ED5B617E54E86022EF386314375BCAB231F3D0CD44B83923880
BC0D9F9C0E1B6A5830DEDF7B75FE4470AFF81A6A050BD4C925FC7D84095EBFD4
00FF6FE71EF5E090349B3815838BD4D74EBA00CDA980D16478DD71785CA18F97
5AA1E9F03C136D16B14E7A62A117A2E0> |-
/m <1C60D8A8C9B59F8589ED22FDECA650E9E1A837E77438C245F95B1388B7C0
B7DCE862DEB28673D0F1F20A83825002D6A2144FDE2B741E0E74DB7CFC1E6193
B791F78B25F6504DB3B4514AC21A5AB74886EC1944788608FE2F08761672037A
242A59C72C0F2592B5D4F2FC0BC773D91E69819FBC2128977567FFBA16E5A738
EAE6D202F0BB87A8BC4B29E750B0D49C8322EF34AE9C1B6F18D8A42840F950FD
EBD7867293FF1F53B72656E4FAFAB8D6AFC47A89F01EE823BB658106F0DA51D6
242260E815A4E9AD8159896847977EAF1A85767A78C106FF79F82DFA4325901E
489062C19B718DE08CD25FC449DF16CD> |-
/n <1C60D8A8C9B7D8BE783FD27DDCEE92670289DAF772E2514156EC1CCFC9A7
75E82594B6DCDF8A123EFCD8B1E2CE5C7B8F05948C251ED51DF7370B3D5141B4
8670E4935FC1CBB60603201C27003B3B3FB3104493EA17A3A646250F5959B21B
8F3F573A79724D440A4ADE1ECAE3D83EE3BE544D44B4F612850DDADBE6B0696A
E7104F4515BCCDD0BE724756B5D669B5DFB783DCFB0ADE1E963CA5FEAC304B1F
5139A4616FC410> |-
/o <1C60D8A8C9B7A73DB96DB26EA8C7832BF0DC20E9562E2F0E28CB766EFC99
3959450F8B2D6722F0960C4EB9000B30082C009F8B9E69BEAE50B2F08B3BB631
BE73526457800522BABD8981217D93260201519D95DF88384B0FE001A1FC557D
A521EF05E62D6E17C10844F860F550AC2745B5934C1415F17BCE57F9AC20BA98
718D868834B08548ED21E63CE31F737A622C5EA995D27F9A3780A0A420848072
9E20F13CA9798000AF996056C9DBF36014099AABF1550977CAF6E4F5103B> |-
/p <1C60D8A8C9B7FD8414AAF0B3997CDA347F5E3A3EFC2B7865762267D420C9
84645A7DAB6875D6ACD1B18A2255C7D7CA63799290DCAB0E52D14FCDA2822679
98AAE7EF8D8202A915E6A2D1650255D38A7ECC3F8D9ABCFDAB266B6040D9DE53
C6FDE179D6F157E32833FF8DE574C8CF34335F17E36E49FD0732E006BBF99610
164CCC7D5B732E73FB91A8369321412A6416D56C20C9AE1F395DCA6BC33F6C35
7812A2D5E7296594E769EBA966FD9EE490CDFC0145BAA57F28BFFCDAA1C6803D
F1F986E25B64C26CFD86AB77155055> |-
/r <1C60D8A8C9B77FE2ACA5DE421869F55D359A0C0A6F3BA87C3E3D35F14926
144E11D26C0EAC72F14AF4118EF781E090AE37B47DB151749F022A17473470C5
228503BAE885747592A215EEF0788C747ECDFA0F3578420ECCA18EB92934589B
F5E1CCC96FB599F3D82DF12C1A6B008601D0205F815DA1FBFB734E4BCA788BEC
4120> |-
/s <1C60D8A8C9B77FE2C1A88D6E76EEA9F980B96EEC8C2C6FEB4DE9A9ECCA5B
32AD88CA9AD89CD9B5AAA5924CA6F09B6354A1291C6C838A25230284CD842A7A
DB96B04E559634442800F9AC54CD296EF45CCF09C3856EB0A081154D4BAF9144
8086E30D78E830A4B9CDF153897DF9B1A75A7303D45C1A017723241E6CBF91C4
F517FE67D145CF3F1E5B6C30FD72E23390CAA9E7F6CEFE60EBD36B46A53012F1
8D8A79E0733852181CFD288FFAE607DABBBC83356F75DD58231BF0A798887D5A
382FFB81C1605322D34941162D54332C11780567F267E559E1D5B46AA3C9A150
72C013DBC06B3DABF6B48EB1A91A04766B9B445AC1354C6A0E26112617FC0384
D1565233F20C452E2674063951> |-
/t <1C60D8A8C9B80A3FDC7300FF477721D793BC21A9114B1563499BF8B959FA
F9DFA39E4E9161D05D3FDFEFAC7C50B630D7746D005F245C5847806E8CFB3774
26F75378E70D49CFEAD12EDF6FFE33DAEF58036DEFF3E9B2685FAA37D46C6B4D
995336B22E0A4169190D5581> |-
/u <1C60D8A8C9B7D8BE16A7D3A2CFDC565CC1379C26F1D1BEB1477AB5334023
3333A68D6E73C3A457F70135C17572DF4BA255452ECDA446DEF5B391828C8CCD
3451109DAD31F0F64B8AB70D65E2D90DAE5CB1754ABCB8A2E6C3699AE69C5A52
46CCC58730A5A9E445FC4CC17B370765526A27F7C6221227A76EC5A4130F9EB6
917A13F5E34B8C2A718F1B2BB1485423127AD2533FB859C5CED6B51D089E7063
634E07022FD2418C> |-
/x <1C60D8A8C9B7A73D9B4DFDF4B58E5DB39453DF70A4506D02C706BB6FA6F1
7BE4B67DACFE5D4554D5E932850CFBDA80EBAFEB98AA3BE355B7C604C617AC69
81C3AF0804471CDE190DF945709C0733531AE42F6EEDE946A5D41634DBE24F07
330349FEF179B1195B2388F594AC9C410CF1EAFFAFDC275F3A119F01CC2FD535
E6B81833E5354DD0C44A2C658D30DAE42CC242C61F43EF001D5DA5A8A26393EB
03DBEA8A1895D88D25C3E0894147D52A973BB0881517AAEB3403151E54C69CF4
47D65B4003AC3E31D6697A7E468179CF4618BEF246DFFE0C7B9685F68C940DA1
23933316F9D1F88339643CA5F5B2B67C2AF264D9453E43FEBA955786E8360078
3EC431ECBA646B919F316A1B944BB9AA57EE8F52BDB7BFE2D7ECB4DB4FFEFDC0
28EA84288A6A48EB2B4C1E1A49155819> |-
/y <1C60D8A8C9B7A73DC29C436381C9323D469C0A55C894BE2472F0A58DAB00
31E809F3272362E672EA2EEC3D3F89F45C7371CB8A896498A46793E7F4C2ED07
8538881844C3DB0E27032BC9799B47CA2DA672ADE920E6FB4927C130D86F29A3
DF57B8D8431E223F43DF8D07E1535FD265929DEC8EBBED3447182E8C5D3EA3E5
D3A39F2CD2A1F04F0E15C1635B529665E3B26845E5611B25DA84B7D606CDF275
15D936A46C3D779E0320C64E2070114C846E75BAB689D0D58404EC9A23023320
15DD18051CFE5AD6988E4555151B3E5C1FD837296CF6B4535C24C56942AA7B5E
4ACD3680FCE85BB481CA77860890A8B1D5F6CDEE04E7D77CDC3F5CAA46DE1CBD
A266CDCA0C0C> |-
/.notdef <1C60D8A8C9B825FA0C55D94CF30B04E91930F79B2A7531B6DFEACE
089BFA0CCAAA1D14> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/ZLTSUQ+NewCenturySchlbk-Italic /SODBAA+NewCenturySchlbk-Italic findfont ct_VMDictPut
/ZLTSUQ+NewCenturySchlbk-Italic*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 20{/.notdef}rp /E 
3{/.notdef}rp /I /.notdef /K /.notdef /M 5{/.notdef}rp /S 
13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g 
/.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]
ZLTSUQ+NewCenturySchlbk-Italic nf
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
134.209 338.696 mo
(Engineering constantsM.K.S. systemS.I. units)
[5.56792 4.70496 4.12993 2.54405 4.70496 3.40698 3.407 3.40698 2.54404 4.70496 4.12994 2.89392 
3.407 3.84227 4.70496 3.40698 2.69193 4.41756 4.70499 2.69193 54.5757 7.21042 2.03345 5.63239 
2.03345 5.05734 2.03342 1.48468 3.32385 3.75909 3.32379 2.60876 3.32382 98.2015 5.15292 2.12906 
3.13177 2.12909 1.58029 4.71735 4.71741 2.55646 2.70441 0 ]xsh
145.62 348.133 mo
(and expressions)
[4.41913 4.70651 4.70654 3.16989 3.40852 3.84383 4.41914 3.40852 3.40854 3.40854 3.40852 2.54559 
3.84384 4.70653 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
110.283 368.327 mo
(1.Value of )
[3.98763 24.1046 5.58113 4.29079 2.41747 4.71819 3.85551 2.03888 3.8555 2.55724 0 ]xsh
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
169.764 368.327 mo
( g)
[1.97127 0 ]xsh
ZLTSUQ+NewCenturySchlbk-Italic*1 [5.48693 0 0 -5.48693 0 0 ]msf
175.91 370.959 mo
(0)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
249.874 368.326 mo
(9.81 kg-m/kgf-sec)
[4.27524 2.11429 4.27524 4.27524 2.3428 4.5629 4.12759 2.54175 6.86377 2.11435 4.56287 4.12756 
2.54172 2.54172 3.55231 3.83994 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
311.986 365.911 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
379.804 368.326 mo
(1 kg-m/N-sec)
[4.27057 2.20135 4.55823 4.12292 2.53702 6.85919 2.10965 6.28387 2.53699 3.54764 3.83527 0 
]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
426.114 365.911 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
110.286 379.519 mo
(2.Universal gas constant848 kgf-m/kg mole-\260K848 \327 9)
[3.98219 24.1068 6.28308 4.6972 2.39648 4.12216 3.8345 3.39919 3.54684 4.26979 2.3965 1.57562 
4.12216 4.26979 3.54684 1.57562 3.39922 3.8345 4.6972 3.54684 2.97182 4.26979 4.69722 34.1888 
4.26981 4.26978 4.26981 2.6561 4.55743 4.12213 2.53625 2.53629 6.85837 2.10889 4.55743 4.12213 
2.65607 6.8584 3.8345 2.39651 3.83447 2.53629 3.0571 57.8603 4.26978 4.26984 4.26978 2.00314 
4.65851 2.00317 0 ]xsh
405.658 379.519 mo
(.81 = 8314 J/kg-mole-\260K)
[2.10886 4.26978 4.26978 2.00314 4.65851 2.00314 4.26981 4.26978 4.26981 4.26978 2.00317 4.26978 
2.10886 4.5575 4.12213 2.53625 6.85837 3.83447 2.39651 3.83453 2.53625 3.05707 0 ]xsh
379.805 390.93 mo
(\()sh
.75 .679688 .669922 .902344 cmyk
true set_gvm
%ADOBeginSubsetFont: BRQAAA+MSTT31c542 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BRQAAA+MSTT31c542 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 81 /G51 put
def
/FontBBox {0 0 701 478} def
end
systemdict begin
dup /Private
8 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-250 -0 2200 2200] def
/BlueScale 0.004 def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/G51 <1C60D8A8C9B692AABCE13327DF6C7241AD7CF7626D1CF05C11F304B12A
739D44F4D752DBC644D6885CAF1EA10C23C4D8954EE5282A447EFC42B664E423
BFC83A593683493DA3815D43A934C0E20175835940F1F5037406A5F25F86B33B
364312ED4A269B462AE691EF98238ED4BD3955656AF5EFF3C343D0E9F1225386
E295F162F534793624B7FFDC648C051F272E779186AA1E6A81233A289957E954
242BAB2C52929BA05D68246443BE105992AAF0F825099102629FEE9A4FA231BB
8FFE76C8> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/ZLTSUR+MSTT31c542 /BRQAAA+MSTT31c542 findfont ct_VMDictPut
/ZLTSUR+MSTT31c542*1 
[81{/.notdef}rp /G51 174{/.notdef}rp]
ZLTSUR+MSTT31c542 nf
ZLTSUR+MSTT31c542*1 [7.68171 0 0 -7.68171 0 0 ]msf
383.096 391.809 mo
(Q)sh
.699219 .675781 .640625 .738281 cmyk
true set_gvm
%ADOBeginSubsetFont: LXAAAA+NewCenturySchlbk-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUO+NewCenturySchlbk-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B81F2C3AC334E208C42984CB57294A52E0FB9CB5A
9C5E718941E8D9D95E6B36FE10970F8655FB8F6F7B15E02531DD52A622267482
F82E9284B3391C8DF4F1785120983240CDF> |-
/G <1C60D8A8C9B6FF86FA170110F64185F3ED0EF0A4729A7A81CA983A5AF072
A504F0D68B921F42A21DC0455E258355FD4450ADDCE62543CC2362337A2A4FB1
52C4F9FE8B6BAC6AC83A5C301EA5CCC3CA67E70CF2E5EDA20AB956E3BC29EFCF
93DF29F2C3FCB855FFDCA6373E7ABC052CE0108F4724443CD49D19C0C5B43129
B018995A37C6B6BC3DB561ACC35A8DA53D47255B7AC9B3C8BB4B23EB4C268E50
8AC18330AEC1DECCCF58849A8ED4D63EE7294D165899E949AC99> |-
/R <1C60D8A8C9B6079F62BE6B8EC4EA8EF716996EE00A2D69E8738CC1747834
EEA3579EE8B438B413F13B92662581E4BE16B1A69496996F416D99C5F526798C
FA5CE677A23A8A8767F5FC4596FB51EBC4D5D7A4D323542BB203520E646583FC
B1A58F1085B79C98AE776F00D4C0053EA78C211D5DA2D30B70030CF9A604F89A
D8BBA1DBD4F1D33AA6BAD2092324A8ED2ECB5235C05E552562E9E3A75EEF7958
D0F94745B050BBEB421EB6FD8EDC44D891D2E38703E1EEBF6D362D414F204E30
E1E27597890C3AE8A590984F5C422C6799764C281FF356ECBDBEEF43ACEC4B81
075D1AE197F7AA9A2F7D0664BBB99DC6D9CCC6BAF776A581568884F950B0D66A
05705128389D22> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUO+NewCenturySchlbk-Roman /Encoding get
dup 41 /parenright put
dup 71 /G put
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUO+NewCenturySchlbk-Roman*1 
[32{/.notdef}rp /space /endash 6{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 
/period /slash /zero /one /two /three /four /five 
/six /seven /eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C 
3{/.notdef}rp /G /H /.notdef /J /K 2{/.notdef}rp /N 
3{/.notdef}rp /R 2{/.notdef}rp /U /V /W 9{/.notdef}rp /a 
/b /c /.notdef /e /f /g /h /i 
/j /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w 56{/.notdef}rp /degree 
38{/.notdef}rp /multiply 40{/.notdef}rp]
ZLTSUO+NewCenturySchlbk-Roman nf
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
390.558 390.931 mo
(  1 kgf-m = 9.81 joules\))
[2.09564 2.09564 4.27756 2.09567 4.56522 4.12994 2.54398 2.54404 6.86615 2.09564 4.66623 2.0957 
4.27753 2.11661 4.27759 4.27753 2.09567 2.25671 3.84222 4.70499 2.40427 3.84229 3.55463 0 
]xsh
110.281 417.266 mo
(3.Gas constant \(R\)29.27 kgf m/kg-\260K for air)
[3.98531 24.1099 6.00633 4.28067 3.55774 2.00626 3.4101 3.84537 4.7081 3.55772 2.98268 4.2807 
4.70807 2.9827 2.00626 2.54713 5.57103 55.0362 4.28069 4.28067 2.11975 4.28064 4.28064 2.17731 
4.5683 4.13303 2.54718 2.17728 6.86926 2.11975 4.5683 4.13303 2.54715 3.06799 6.00629 2.17728 
2.54715 3.84546 3.41003 2.17731 4.28064 2.40741 0 ]xsh
grestore
.438955 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
381.56 414.196 mo
399.996 414.196 li
false sop
.75 .679688 .669922 .902344 cmyk
@
gsave
25.4395 36 mo
25.4395 806 li
569.561 806 li
569.561 36 li
cp
clp
ZLTSUO+NewCenturySchlbk-Roman*1 [7.68171 0 0 -7.68171 0 0 ]msf
382.218 411.344 mo
(8314)
[4.17041 4.3855 4.17035 0 ]xsh
386.604 422.321 mo
(29)
[4.17041 0 ]xsh
.699219 .675781 .640625 .738281 cmyk
true set_gvm
%ADOBeginSubsetFont: LXAAAA+NewCenturySchlbk-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUO+NewCenturySchlbk-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B854D0E9B3B0A3D5D3375BD81AE208E100A6700738E385
0239733F09F868BA19D267F82A73F1A059C00C6DBA8323DE869EFF095143215E
3BE0B261A6E40AC23F940E2590F878EAFE068585CB5DE1AD028B894E66D8E480
CFFE6D90699488D5DF96213FD033A572D5ACDE2D21F7BA2598E2C9AC868724BD
93810D8483> |-
/B <1C60D8A8C9B6079F62BE6B8EC4EA8EF716996EE00A2D69E870182A895C0F
FF7AB89A34F622BE589BE64BB81126712938B2D6B7D1EF716EAE478400E3B2D7
725DF90B5707463211D8FCCFF2699C8A65FEE8062FA661887924E917690FB445
96BE5893801EC81EF3508D50800FC8230B46345571FB3E3BF4CF815A4334CFD1
425117852CFD24CB1FBF97C28923E11214B58AD50EFCEF3D8BE2A6A6D6AB1EB6
9332976E717C69ED55A8883CC65C7252DC9FC70D4DC12464ACBB41ECEDF117BB
4B54E3A4F56613F3078BF114147893085E56A6B4E23F217FBD88A17904C30843
532405BC24> |-
/F <1C60D8A8C9B64EDFF4C1517590F226AE618B1A881E208E633C95209EE127
7D92AA312A8954F62C74B4E5E57968A023147DFD1128E5808F35CB422D41BF63
7D8B217309185970BEA36EF9C92721400B9C1D5F7955D08E75E177F30A008A2F
CEC5A0D43670C7562D1C79A2D2BB0C4A96B415F00C35C01E297127892AA3F57C
DC9897471FE36B867315E18790C8CC2E9CE7ACC06E4C0031D4581F6481230FDE
A89C95A668A86F2A8D0ED7CE33> |-
/L <1C60D8A8C9B64EDFF458FC15E58523DA23AF43D5E5CB22683630F879E26C
14363C76A10D7B2065AA2122A3D54C7256168C0977C087D3C794A400FEA38547
6222221291856BC63C7A2349CEC99705915AEDF661AB96C7670FF8B972AC77B7
97FE2309A463BB1636678AB87B2D11BFD403625898DC3A8D0B0552D7> |-
/Q <1C60D8A8C9B6FF86FB92DC1F97D0D64F0F2792EE0F7BB6D48E008CC7628A
6284EA50A5B67808BBCCEA697C25A74CB51D80D936E84B28526E43D8CF78E9D2
0B9B2444BEE87DBBA7842F2FF4B65C9691C245C1B9373792ACEC310241EAB060
B5ADC96B3DA8C1B7F590B0564BEF543805930C27E2BE8D86B3D502BE64EF2EBE
8AABD9A680D50D440F12FF911C711F6DD6E858206AAD5A1FAD889ED986946108
FF105B526735DD7CFC13E6245B83D09A8F387E6FF71545835D9D987536E18528
78826603ECAE4F4E1679C4A59BE54616F580CF6C0A8FD7660E1D90D4366FA698
7594F2231EA89B8944B5D75882814BA6D808BFDF6B3205200238EE1EF4BBBA17
58EEDF1AFC5F758E64C7CED341DF6DB3423B880065> |-
/S <1C60D8A8C9B66B395FCB36FDEBC5282327CFB2C811DA81728788C727D2ED
1FE547C777C2B7A1302ECDB41F3DEB99364E672BED5AC390193E60C825AD3697
25F1026DC0C1735141191FFCC1B5E39C4FF2C356C58A6DC24CF163D532346826
9986ECFD8B2F839C929037CA318434877B829F080E2723946E404F413EB317F5
47B8C1624AAE16BBADFD65B32DB1B937B255C08E18069AE7792CCB9ED5B2EED3
A0072501B833C12CB3DC7FDB4B5A4294B32427F18D286D12E009B13F099D7E1A> |-
/T <1C60D8A8C9B64EDFF44BABD3AE992196C56CEFDB9C654E4CF4F76D3B8A28
60671AF9B723F4839FA79DA972FD24A18D7066B1F40579E8720B1417F285443A
D727E015761E1C552705CA01FCC73751C3427BC89FC61240F344254B4D67C108
0206A7119BAF56C9875C316C1F91CD7BAF6CD63A31209AD40D26EF2AC31F5DEE
42647A1D54F8145BE54FE6FB260549ADE368> |-
/x <1C60D8A8C9B78256E05B755925499A59E55D9333D754512C5E96604F772D
48DB54E9C0362913D1139AF94FF4F2F22BEE1ED74A3A0171AEDC5C2AB77A2C69
743299DA1A730DDC437B79DFAAFADC0CC82F800CB08E1B2F98D5810F6F35C4E0
301BDBB474C9DFB3361F334D7B46C84F5F5B779FA278017E8E796B33A6225C3A
CCBC5C8C602F7EDC816D73CB5B3380A429CB0C56A2E3224B7C36404A76FB0548
FC3E596125B14E073831F1FC4B0A04A171EC4989DC5202EC41DFB310C48F92BB
FFA3B33810B3E4CBFC2122E570A196DC63E6> |-
/y <1C60D8A8C9B78256DD0FB1D2F598AFEDFA28C20567EBCA6BA62D351DC6DB
7FC25D116FD1CFD7A3CD3528CD9ECC6FCAF2E85B1D23745A2065ECFAD8E1FDD5
184F4C32793585D994B37A3E6FD6235E6A2C7A4E69A30BACEE0A21AF29578D90
1AD297AAA6DF39A7D4F9CE3039B3F1A3F2FCB217B717310924EF7F7A581AB85E
FE1F426BD14E33EE59B2676249D82B6FC8E9767C333D4D590F65C154A7403DB0
00DA55DFDF8D10B65B2870592441FCB40E01C350187ECB1AF73E369AE6037550
9C065D1584AF0202488020E0A551BA3D496A3F19> |-
/z <1C60D8A8C9B75A178DE1873BDD4280247DC88738841A409ED138C8CF562D
C4C034E20C992B824681E4CD95A2DE0BDC7F447E85B039DF1398FE033F0BBD14
74BD883CF19D261351C8DB1A60586B4F3610A7CC4F210EB47675E2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUO+NewCenturySchlbk-Roman /Encoding get
dup 58 /colon put
dup 66 /B put
dup 70 /F put
dup 76 /L put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 120 /x put
dup 121 /y put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUO+NewCenturySchlbk-Roman*1 
[32{/.notdef}rp /space /endash 6{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 
/period /slash /zero /one /two /three /four /five 
/six /seven /eight /nine /colon 2{/.notdef}rp /equal 4{/.notdef}rp 
/B /C 2{/.notdef}rp /F /G /H /.notdef /J 
/K /L /.notdef /N 2{/.notdef}rp /Q /R /S 
/T /U /V /W 9{/.notdef}rp /a /b /c 
/.notdef /e /f /g /h /i /j /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /y /z 53{/.notdef}rp 
/degree 38{/.notdef}rp /multiply 40{/.notdef}rp]
ZLTSUO+NewCenturySchlbk-Roman nf
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
402.41 417.269 mo
( = 287 joules/kg-K for air)
[2.05133 4.67404 2.05136 4.28531 4.28534 4.28537 2.0513 2.26443 3.85007 4.71271 2.41205 3.85004 
3.56244 2.12436 4.57303 4.1377 2.55182 6.01096 2.05136 2.55179 3.85007 3.41473 2.05133 4.28537 
2.41208 0 ]xsh
110.287 438.996 mo
(4.Specific heats \(for air\))
[3.98141 24.1061 4.85986 4.42455 3.84929 3.41397 2.41127 2.55104 2.41127 3.41397 1.8951 4.71198 
3.84927 4.28455 2.98657 3.56163 1.8951 2.55103 2.55104 3.84927 3.41397 1.8951 4.28455 2.41127 
3.41402 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: SODBAA+NewCenturySchlbk-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
ZLTSUQ+NewCenturySchlbk-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B7B4A112478F2B632648058A62B756B6B889B11D3A87E9D85F
EC24C8046F301B1D9CF7C3F698820C5AAFD2690293D84A0220BF6E84BB1DFB31
124EDE73AEF992EB4E845C388B60E57B0DAB473D0FD739146E47C59E010872E7
3E2CFD68DFC7661843A215ECC28B95AD428A661286446ED93DA85786BB3947C6
D446CCE8E5106A2711F3E81EB7BE26995617B4B310D611BC3C156C810BA13DDF
27ADBE695902FD3D510EDD8CE988805556919850BEDC923D90> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZLTSUQ+NewCenturySchlbk-Italic /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/ZLTSUQ+NewCenturySchlbk-Italic*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero 20{/.notdef}rp /E 
3{/.notdef}rp /I /.notdef /K /.notdef /M 5{/.notdef}rp /S 
13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g 
/.notdef /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t /u /v /.notdef /x /y 
134{/.notdef}rp]
ZLTSUQ+NewCenturySchlbk-Italic nf
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
249.877 438.996 mo
(c)sh
ZLTSUQ+NewCenturySchlbk-Italic*1 [5.48693 0 0 -5.48693 0 0 ]msf
253.385 441.631 mo
(v)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
256.238 438.997 mo
( = 0.17 kcal/kg-\260K)
[2.07388 4.6694 2.07385 4.28067 2.11975 4.28067 4.28067 2.07388 4.56833 3.4101 4.2807 2.40738 
2.11975 4.56833 4.13303 2.54715 3.06796 0 ]xsh
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
379.808 438.997 mo
(c)sh
ZLTSUQ+NewCenturySchlbk-Italic*1 [5.48693 0 0 -5.48693 0 0 ]msf
383.315 441.631 mo
(v)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
385.949 438.997 mo
( = 0.17 \327 4.184)
[1.79404 4.66318 1.79404 4.27448 2.11349 4.27444 4.27444 1.7941 4.66309 1.79407 4.27444 2.11353 
4.27448 4.27444 0 ]xsh
385.07 450.191 mo
(  = 0.71128 kJ/kg-K)
[1.97208 1.97202 4.65927 1.97208 4.27054 2.10968 4.27054 4.27057 4.27054 4.27063 4.27054 1.97205 
4.55823 4.2706 2.10962 4.55823 4.12296 2.53702 0 ]xsh
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
249.872 461.384 mo
(c)sh
ZLTSUQ+NewCenturySchlbk-Italic*1 [5.48693 0 0 -5.48693 0 0 ]msf
253.385 464.018 mo
(p)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
256.458 461.384 mo
( = 0.24 kcal/kg-\260K)
[2.1998 4.67325 2.19983 4.28455 2.12366 4.28455 4.28455 2.19983 4.5722 3.414 4.28455 2.41129 
2.12363 4.57224 4.13687 2.55106 3.0719 0 ]xsh
ZLTSUQ+NewCenturySchlbk-Italic*1 [7.77316 0 0 -7.77316 0 0 ]msf
379.802 461.384 mo
(c)sh
ZLTSUQ+NewCenturySchlbk-Italic*1 [5.48693 0 0 -5.48693 0 0 ]msf
383.315 464.018 mo
(p)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
386.388 461.384 mo
( = 0.24 \327 4.184)
[1.89044 4.66861 1.89041 4.27988 2.11899 4.27988 4.27994 1.89041 4.66858 1.89044 4.27988 2.11893 
4.27994 4.27988 0 ]xsh
385.075 472.577 mo
(  = 1 kJ/kg-K)
[2.17337 2.17337 4.66553 2.1734 4.27676 2.17337 4.56442 4.27676 2.11588 4.56442 4.12918 2.54324 
0 ]xsh
110.286 491.893 mo
(5.Flow through nozzle-exit91.5 )
[3.98531 24.1099 5.14363 2.40738 3.84538 6.00633 1.86867 2.98268 4.70807 3.41011 3.84538 4.7081 
4.13303 4.7081 1.86089 4.70808 3.8454 3.69772 3.69772 2.40741 3.8454 2.54716 3.84537 4.13304 
2.40741 26.733 4.33665 4.33662 2.17572 4.33667 0 ]xsh
true set_gvm
%%IncludeResource: font Symbol
/ZLTSUS+Symbol /Symbol findfont ct_VMDictPut
/ZLTSUS+Symbol*1 
[115{/.notdef}rp /sigma 98{/.notdef}rp /radical 41{/.notdef}rp]
ZLTSUS+Symbol nf
reset_gvm
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
266.775 491.893 mo
(\326)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
270.941 491.893 mo
(U where U is in kcal44.7 )
[6.30716 1.86014 6.01953 4.72128 3.85861 3.42334 3.85858 1.86011 6.30719 1.86014 2.42056 3.57095 
1.86014 2.42062 4.72128 1.86011 4.58157 3.42334 4.29382 39.7628 4.29388 4.29385 2.13297 4.29391 
0 ]xsh
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
396.703 491.893 mo
(\326)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
400.869 491.893 mo
(U where U is in kJ)
[6.30017 1.92542 6.01248 4.71436 3.85156 3.41632 3.85162 1.92538 6.30023 1.92538 2.4136 3.56396 
1.92545 2.41357 4.71429 1.92545 4.57455 0 ]xsh
138.377 503.087 mo
(velocity \(C)
[4.12137 3.83372 2.39572 3.83374 3.39842 2.39572 2.97101 4.1214 1.651 2.53549 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
175.251 505.718 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
178.323 503.085 mo
(\))sh
110.285 522.402 mo
(6.Refrigeration 1 ton= 50 kcal/min= 210 kJ/min)
[3.98685 24.1115 5.56479 3.83917 2.54094 3.40385 2.40115 4.12683 3.83917 3.40385 4.27444 2.97647 
2.40117 3.83916 4.70186 2.00003 4.27448 2.00002 2.97649 3.83916 49.0866 4.66318 1.6658 4.27441 
4.27448 1.66577 4.56213 3.40387 4.27444 2.40118 2.11353 6.86307 2.40118 87.2762 4.66321 1.75909 
4.27441 4.27448 4.27441 1.75903 4.56213 4.27448 2.11346 6.86304 2.40118 0 ]xsh
110.285 539.961 mo
(7.)
[3.98452 0 ]xsh
ZLTSUN+NewCenturySchlbk-Bold*1 [7.77316 0 0 -7.77316 0 0 ]msf
138.377 539.961 mo
(Heat transfer)
[6.70972 4.40901 4.69643 3.25844 2.681 3.25842 3.98137 4.69643 5.27173 3.83371 2.97104 4.409 
0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
138.377 551.154 mo
(The Stefan BoltzmanQ = )
[5.13896 4.70341 3.84073 1.79559 4.8513 2.97803 3.84073 2.54247 4.27602 4.70345 1.79559 5.56636 
3.84073 2.40271 2.97803 3.69308 6.86459 4.276 41.4006 6.07938 1.95883 4.74249 0 ]xsh
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
264.357 551.154 mo
(s)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
268.966 551.154 mo
(T)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
274.235 548.516 mo
(4)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
277.307 551.15 mo
( kcal/m)
[1.87021 4.54736 3.3891 4.25967 2.38644 2.09872 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
302.767 548.516 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
305.839 551.15 mo
(-hQ = )
[2.49197 71.4693 6.1377 1.93085 4.80075 0 ]xsh
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
394.065 551.15 mo
(s)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
398.674 551.15 mo
(T)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
403.946 548.516 mo
(4)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
406.799 551.15 mo
( watts/m)
[1.78082 5.98767 4.26199 2.96402 2.96399 3.53906 2.1011 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
437.307 548.516 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
440.379 551.15 mo
(-h)
[2.49426 0 ]xsh
138.376 562.344 mo
(Law is given by :when )
[5.14517 4.28224 6.00787 1.78239 2.40892 3.55931 1.78238 4.13457 2.40895 4.13457 3.84694 4.70964 
1.78239 4.28223 4.13458 1.78238 55.2746 6.00789 4.70966 3.84692 4.70963 0 ]xsh
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
271.157 562.344 mo
(s)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
275.766 562.344 mo
( = 4.9 \327 10)
[1.97128 4.65771 1.97128 4.26901 2.10806 4.26904 1.97125 4.65775 1.97125 4.26904 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
312.423 559.71 mo
( ! 8)
[1.37067 2.98761 1.37064 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
379.803 562.344 mo
(when )
[6.00708 4.70889 3.84616 4.70886 0 ]xsh
ZLTSUS+Symbol*1 [7.77316 0 0 -7.77316 0 0 ]msf
401.093 562.344 mo
(s)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
405.703 562.344 mo
( = 5.67 \327 10)
[1.9744 4.67252 1.97437 4.28378 2.12286 4.28378 4.28378 1.97437 4.67249 1.9744 4.28378 0 
]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
446.524 559.71 mo
( ! 8)
[1.36292 3.00244 1.36298 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
249.872 573.537 mo
(kcal/h-m)
[4.56834 3.4101 4.2807 2.40735 2.11975 4.7081 2.54718 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
280.818 570.903 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
283.891 573.537 mo
(-\260K)
[2.53314 3.05402 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
295.523 570.903 mo
(4)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
379.802 573.537 mo
(W/m)
[7.50735 2.04279 0 ]xsh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
396.044 570.903 mo
(2)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [7.77316 0 0 -7.77316 0 0 ]msf
398.897 573.537 mo
(K)sh
ZLTSUO+NewCenturySchlbk-Roman*1 [5.48693 0 0 -5.48693 0 0 ]msf
404.823 570.903 mo
(4)sh
100.19 326.625 mo
495.688 326.625 li
495.688 582.096 li
100.19 582.096 li
cp
99.0922 354.059 mo
494.152 354.059 li
126.746 325.527 mo
126.746 581.877 li
238.241 326.405 mo
238.241 582.316 li
359.832 326.405 mo
359.832 581.877 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 2
%%DocumentNeededResources: font Symbol
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize A4
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
